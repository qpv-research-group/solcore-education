[
  {
    "objectID": "solar-cell-simulation/notebooks/2a-optical_constants.html",
    "href": "solar-cell-simulation/notebooks/2a-optical_constants.html",
    "title": "solcore-education",
    "section": "",
    "text": "In the first set of scripts focusing on the Si cell, we used different optical models to calculate total absorption and absorption profiles. These absorption profiles are used by the electrical models (if using the DA or PDD model). However, we didn’t discuss what actually goes into these optical models, which are the optical constants (either the complex refractive index, \\(n + i \\kappa\\) (\\(\\kappa\\) is the extinction coefficient), or equivalently the dielectric function \\(\\epsilon_1 + i \\epsilon_2\\)). In these two examples we will discuss what these values are, how to get them, and how to model them.\n\nfrom solcore.absorption_calculator.nk_db import download_db, search_db, create_nk_txt\nfrom solcore.absorption_calculator import calculate_rat, OptiStack\nfrom solcore.material_system import create_new_material\nfrom solcore import material\nfrom solcore import si\nfrom solcore.structure import Layer\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom os import remove\n\nimport seaborn as sns\n\n\n\nIf we want to use a material which is not in Solcore’s database, or perhaps we want to use measured data rather than data from a literature source, we can add a material to the database. We need to have n and k data, and (optionally) a parameter file in the correct format - see examples of parameter files in e.g. material_data/Adachi/binaries.txt inside Solcore’s source files. These parameter files contain things like the bandgap, lattice constant, effective carrier masses, etc.\nHere, we create a new material, silicon-germanium-tin, from input files. Here, the parameters in SiGeSn_params.txt have been copied directly from Ge. The last argument, with the parameters file, is optional; if you exclude it the material will be added with just the n and k values and no further information specified (useful if you just want to do optical calculations).\n\ncreate_new_material('SiGeSn', 'data/SiGeSn_n.txt', 'data/SiGeSn_k.txt', 'data/SiGeSn_params.txt')\n\nWhen adding custom materials - or getting the refractive index database - the information will be stored by default in your home directory. You can change thethe SOLCORE_USER_DATA environmental variable in the config file to your prefered location or, by default, it will be in your home directory, in a (hidden) directory called .solcore.\nWe can now create an instance of it like any Solcore material:\n\nwl = si(np.arange(300, 1700, 5), 'nm')\n\nSiGeSn = material('SiGeSn')()\nGe = material('Ge')()\n\nPLOT 1: Comparing the optical constants of SiGeSn and Ge.\n\nplt.figure()\nplt.plot(wl*1e9, SiGeSn.n(wl), 'r-', label='SiGeSn n')\nplt.plot(wl*1e9, SiGeSn.k(wl), 'k-', label=r'SiGeSn $\\kappa$')\n\nplt.plot(wl*1e9, Ge.n(wl), 'r--', label='Ge n')\nplt.plot(wl*1e9, Ge.k(wl), 'k--', label=r'Ge $\\kappa$')\n\nplt.xlabel('Wavelength (nm)')\nplt.ylabel(r'SiGeSn n / $\\kappa$')\nplt.legend()\nplt.title(\"(1) Optical constants of Ge and SiGeSn\")\nplt.show()\n\n\n\n\n\n\n\nSolcore can also directly interface with the database from www.refractiveindex.info, which contains around 3000 sets of \\(n\\)/\\(\\kappa\\) data for a large number of different materials. Before the first use, it is necessary to download the database. This only needs to be done once, so you can comment this line out after it’s done:\n\ndownload_db()\n\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaking request to https://refractiveindex.info/download/database/rii-database-2021-07-18.zip\nDownloaded and extracting...\nWrote /var/folders/60/mjbn28rj1ql_r4w004g_ryt00000gq/T/tmpn030pe9k/database from https://refractiveindex.info/download/database/rii-database-2021-07-18.zip\n\n\n/Users/phoebe/Documents/develop/solcore5/solcore/material_data/refractiveindex_info_DB/dbmaterial.py:278: RuntimeWarning: invalid value encountered in sqrt\n  n = numpy.sqrt(nsq)\n/Users/phoebe/Documents/develop/solcore5/solcore/material_data/refractiveindex_info_DB/dbmaterial.py:299: RuntimeWarning: invalid value encountered in sqrt\n  n = numpy.sqrt(n)\n\n\nLOG: 2746,other,PtAl2,Chen : Bad Material YAML File.\n***Wrote SQLite DB on  /Users/phoebe/.solcore/nk/nk.db\n\n\nNow we can search the database to select an appropriate entry. Search by element/chemical formula, or by the name of the author who published the data. In this case, we look for silver.\n\nsearch_db('Ag', exact=True)\n\nThis prints out, line by line, matching entries. This shows us entries with “pageid”s 0 to 16 correspond to silver.\nLet’s compare the optical behaviour of some of those sources:\n\npageid = 0, Johnson\npageid = 2, Jiang\npageid = 4, McPeak\npageid = 10, Hagemann\npageid = 14, Rakic (BB)\n\n(The pageid values listed here are for the 2021-07-18 version of the refractiveindex.info database; this can change with different versions of the database)\nNow, we create instances of materials with the optical constants from the database. The name (when using Solcore’s built-in materials, this would just be the name of the material or alloy, like ‘GaAs’) is the pageid, AS A STRING, while the flag nk_db must be set to True to tell Solcore to look in the previously downloaded database from refractiveindex.info\n\nAg_Joh = material(name='0', nk_db=True)()\nAg_Jia = material(name='2', nk_db=True)()\nAg_McP = material(name='4', nk_db=True)()\nAg_Hag = material(name='10', nk_db=True)()\nAg_Rak = material(name='14', nk_db=True)()\nAg_Sol = material(name='Ag')() # Solcore built-in (from SOPRA)\n\nNow we plot the \\(n\\) and \\(\\kappa\\) data. Note that not all the data covers the full wavelength range, so the \\(n\\)/\\(\\kappa\\) value gets extrapolated from the last point in the dataset to cover any missing values.\nPLOT 2: \\(n\\) and \\(\\kappa\\) values for Ag from different literature sources\n\nnames = ['Johnson', 'Jiang', 'McPeak', 'Hagemann', 'Rakic', 'Solcore built-in']\n\nwl = si(np.arange(250, 900, 5), 'nm')\n\nplt.figure(figsize=(8,4))\n\nplt.subplot(121)\n# We can plot all the n values in one line:\nplt.plot(wl*1e9, np.array([Ag_Joh.n(wl), Ag_Jia.n(wl), Ag_McP.n(wl),\n                           Ag_Hag.n(wl), Ag_Rak.n(wl), Ag_Sol.n(wl)]).T)\nplt.legend(labels=names)\nplt.xlabel(\"Wavelength (nm)\")\nplt.title(\"(2) $n$ and $\\kappa$ values for Ag from different literature sources\")\nplt.ylabel(\"n\")\n\nplt.subplot(122)\nplt.plot(wl*1e9, np.array([Ag_Joh.k(wl), Ag_Jia.k(wl), Ag_McP.k(wl),\n                           Ag_Hag.k(wl), Ag_Rak.k(wl), Ag_Sol.k(wl)]).T)\nplt.legend(labels=names)\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"$\\kappa$\")\nplt.show()\n\nCompare performance as a back mirror on a GaAs ‘cell’; we make a solar cell-like structure with a very thin GaAs absorber (50 nm) and a silver back mirror.\nPLOT 3: compare absorption in GaAs and Ag for a solar cell-like structure, using Ag data from different sources\nSolid line: absorption in GaAs Dashed line: absorption in Ag\n\nGaAs = material('GaAs')()\n\ncolors = sns.color_palette('husl', n_colors=len(names))\n\nplt.figure()\nfor c, Ag_mat in enumerate([Ag_Joh, Ag_Jia, Ag_McP, Ag_Hag, Ag_Rak, Ag_Sol]):\n    my_solar_cell = OptiStack([Layer(width=si('50nm'), material = GaAs)], substrate=Ag_mat)\n    RAT = calculate_rat(my_solar_cell, wl*1e9, no_back_reflection=False)\n    GaAs_abs = RAT[\"A_per_layer\"][1]\n    Ag_abs = RAT[\"T\"]\n    plt.plot(wl*1e9, GaAs_abs, color=colors[c], linestyle='-', label=names[c])\n    plt.plot(wl*1e9, Ag_abs, color=colors[c], linestyle='--')\n\nplt.legend()\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"Absorbed\")\nplt.title(\"(3) Absorption in GaAs depending on silver optical constants\")\nplt.show()\n\n\n\n\n\n\n\nFinally, we can combine the two methods above and add a material from the refractiveindex.info database to Solcore’s database.\nThe search_db function will print the search results, but it also creates a list of lists with details of all the search results. results[0] contains the first entry; results[0][0] is the ‘pageid’ of the first search result.\nThe function create_nk_txt creates files containing the optical constant data in the format required by Solcore. These are saved in the current working directory.\n\nresults = search_db('Diamond')\n\ncreate_nk_txt(pageid=results[0][0], file='C_Diamond')\n\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\n1 results found.\npageid  shelf   book    page    filepath    hasrefractive   hasextinction   rangeMin    rangeMax    points\n2897    3d  crystals    diamond main/C/Phillip.yml  1   1   0.035424054 10.0    176\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial main/C/Phillip.yml loaded.\nWrote C_Diamond_n.txt\nWrote C_Diamond_k.txt\n\n\nWe now use these files to create a new material in the Solcore database:\n\ncreate_new_material(mat_name='Diamond', n_source='C_Diamond_n.txt', k_source='C_Diamond_k.txt')\n\nMaterial created with optical constants n and k only.\n\n\nWe can now delete the files with the Diamond data, since they have been copied into the user-defined materials directory:\n\nremove(\"C_diamond_n.txt\")\nremove(\"C_diamond_k.txt\")\n\nNow we can use this material as we would any material from Solcore’s database:\nPLOT 4: Optical constants of diamond\n\nDiamond = material('Diamond')()\n\nplt.figure()\nplt.plot(si(np.arange(100, 800, 5), 'nm') * 1e9, Diamond.n(si(np.arange(100, 800, 5), 'nm')))\nplt.plot(si(np.arange(100, 800, 5), 'nm') * 1e9, Diamond.k(si(np.arange(100, 800, 5), 'nm')))\nplt.title(\"(4) Optical constants for diamond\")\nplt.show()\n\n\n\n\n\n\n\nSo, we have at least 4 different ways of getting optical constants:\n\nFrom Solcore’s database\nBy adding our own material data to Solcore’s database\nBy using the refractiveindex.info database directly\nSimilarly, we can add materials from the refractiveindex.info database to Solcore’s database\n\nIf we add materials to the database, we can also choose to add non-optical parameters."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "solcore-education",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/1b-simple_cell.html",
    "href": "solar-cell-simulation/notebooks/1b-simple_cell.html",
    "title": "solcore-education",
    "section": "",
    "text": "In this script, we will build on the TMM model from example 1(a) and look at the effects of interference.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom solcore import material, si\nfrom solcore.solar_cell import Layer\nfrom solcore.absorption_calculator import calculate_rat, OptiStack\nimport seaborn as sns\n\n\n\nFirst, let’s define some materials:\n\nSi = material(\"Si\")\nSiN = material(\"Si3N4\")()\nAg = material(\"Ag\")()\n\nNote the second set of brackets (or lack thereof). The Solcore material system essentially operates in two stages; we first call the material function with the name of the material we want to use, for example Si = material(“Si”), which creates a general Python class corresponding to that material. We then call this class to specify further details, such as the temperature, doping level, or alloy composition (where relavant). This happens below when defining Si_n and Si_p; both are use the Si class defined above, and adding further details to the material. For the definitions of SiN and Ag above, we do both steps in a single line, hence the two sets of brackets.\n\nSi_n = Si(Nd=si(\"1e21cm-3\"), hole_diffusion_length=si(\"10um\"))\nSi_p = Si(Na=si(\"1e16cm-3\"), electron_diffusion_length=si(\"400um\"))\n\nTo look at the effect of interference in the Si layer at different thicknesses, we make a list of thicknesses to test (evenly spaced on a log scale from 400 nm to 300 um):\n\nSi_thicknesses = np.linspace(np.log(0.4e-6), np.log(300e-6), 8)\nSi_thicknesses = np.exp(Si_thicknesses)\n\nwavelengths = si(np.linspace(300, 1200, 400), \"nm\")\n\noptions = {\n    \"recalculate_absorption\": True,\n    \"optics_method\": \"TMM\",\n    \"wavelength\": wavelengths\n           }\n\nMake a color palette using the seaborn package to make the plots look nicer\n\ncolors = sns.color_palette('rocket', n_colors=len(Si_thicknesses))\ncolors.reverse()\n\ncreate an ARC layer:\n\nARC_layer = Layer(width=si('75nm'), material=SiN)\n\n\n\n\nNow we are going to loop through the different Si thicknesses generated above, and create a simple solar cell-like structure. Because we will only do an optical calculation, we don’t need to define a junction and can just make a simple stack of layers.\nWe then calculate reflection, absorption and transmission (RAT) for two different situations: 1. a fully coherent stack 2. assuming the silicon layer is incoherent. This means that light which enters the Si layer cannot interfere with itself, but light in the ARC layer can still show interference. In very thick layers (much thicker than the wavelength of light being considered) this is likely to be more physically accurate because real light does not have infinite coherence length; i.e. if you measured wavelength-dependent transmission or reflection of a Si wafer hundreds of microns thick you would not expect to see interference fringes.\nPLOT 1\n\nplt.figure()\n\nfor i1, Si_t in enumerate(Si_thicknesses):\n\n    base_layer = Layer(width=Si_t, material=Si_p) # silicon layer\n    solar_cell = OptiStack([ARC_layer, base_layer]) # OptiStack (optical stack) to feed into calculate_rat function\n\n    # Coherent calculation:\n    RAT_c = calculate_rat(solar_cell, wavelengths*1e9, no_back_reflection=False) # coherent calculation\n    # For historical reasons, Solcore's default setting is to ignore reflection at the back of the cell (i.e. at the\n    # interface between the final material in the stack and the substrate). Hence we need to tell the calculate_rat\n    # function NOT to ignore this reflection (no_back_reflection=False).\n\n    # Calculation assuming no interference in the silicon (\"incoherent\"):\n    RAT_i = calculate_rat(solar_cell, wavelengths*1e9, no_back_reflection=False,\n                          coherent=False, coherency_list=['c', 'i']) # partially coherent: ARC is coherent, Si is not\n\n    # Plot the results:\n    plt.plot(wavelengths*1e9, RAT_c[\"A\"], color=colors[i1], label=str(round(Si_t*1e6, 1)), alpha=0.7)\n    plt.plot(wavelengths*1e9, RAT_i[\"A\"], '--', color=colors[i1])\n\nplt.legend(title=r\"Thickness ($\\mu$m)\")\nplt.xlim(300, 1300)\nplt.ylim(0, 1.02)\nplt.ylabel(\"Absorption\")\nplt.title(\"(1) Absorption in Si with varying thickness\")\nplt.show()\n\n\n\n\nWe can see that the coherent calculations (solid lines) show clear interference fringes which depend on the Si thickness. The incoherent calculations do not have these fringes and seem to lie around the average of the interference fringes. For both sets of calculations, we see increasing absorption as the Si gets thicker, as expected.\n\n\n\nNow we repeat the calculation, but with an Ag substrate under the Si. Previously, we did not specify the substrate and so it was assumed by Solcore to be air (n=1, k=0).\nPLOT 2\n\nplt.figure()\n\nfor i1, Si_t in enumerate(Si_thicknesses):\n\n    base_layer = Layer(width=Si_t, material=Si_p)\n\n    # As before, but now we specify the substrate to be silver:\n    solar_cell = OptiStack([ARC_layer, base_layer], substrate=Ag)\n\n    RAT_c = calculate_rat(solar_cell, wavelengths*1e9, no_back_reflection=False)\n    RAT_i = calculate_rat(solar_cell, wavelengths*1e9, no_back_reflection=False,\n                          coherent=False, coherency_list=['c', 'i'])\n    plt.plot(wavelengths*1e9, RAT_c[\"A\"], color=colors[i1],\n             label=str(round(Si_t*1e6, 1)), alpha=0.7)\n    plt.plot(wavelengths*1e9, RAT_i[\"A\"], '--', color=colors[i1])\n\nplt.legend(title=r\"Thickness ($\\mu$m)\")\nplt.xlim(300, 1300)\nplt.ylim(0, 1.02)\nplt.ylabel(\"Absorption\")\nplt.title(\"(2) Absorption in Si with varying thickness (Ag substrate)\")\nplt.show()\n\n\n\n\nWe see that the interference fringes get more prominent in the coherent calculation, due to higher reflection at the rear Si/Ag surface compared to Ag/Air. We also see a slightly boosted absorption at long wavelengths at all thicknesses, again due to improved reflection at the rear surface\n\n\n\nFinally, we look at the effect of incidence angle and polarization of the light hitting the cell.\nPLOT 3\n\nangles = [0, 30, 60, 70, 80, 89]\n\nARC_layer = Layer(width=si('75nm'), material=SiN)\nbase_layer = Layer(width=si(\"100um\"), material=Si_p)\n\ncolors = sns.cubehelix_palette(n_colors=len(angles))\n\nplt.figure()\n\nfor i1, theta in enumerate(angles):\n\n    solar_cell = OptiStack([ARC_layer, base_layer])\n\n    RAT_s = calculate_rat(solar_cell, wavelengths*1e9, angle=theta,\n                          pol='s',\n                          no_back_reflection=False,\n                          coherent=False, coherency_list=['c', 'i'])\n    RAT_p = calculate_rat(solar_cell, wavelengths*1e9, angle=theta,\n                          pol='p',\n                          no_back_reflection=False,\n                          coherent=False, coherency_list=['c', 'i'])\n\n    plt.plot(wavelengths*1e9, RAT_s[\"A\"], color=colors[i1], label=str(round(theta)))\n    plt.plot(wavelengths*1e9, RAT_p[\"A\"], '--', color=colors[i1])\n\nplt.legend(title=r\"$\\theta (^\\circ)$\")\nplt.xlim(300, 1300)\nplt.ylim(0, 1.02)\nplt.ylabel(\"Absorption\")\nplt.title(\"(3) Absorption in Si with varying thickness\")\nplt.show()\n\n\n\n\nFor normal incidence (\\(\\theta = 0^\\circ\\)), s (solid lines) and p (dashed lines) polarization are equivalent. As the incidence angle increases, in general absorption is higher for p-polarized light (due to lower reflection). Usually, sunlight is modelled as unpolarized light, which computationally is usually done by averaging the results for s and p-polarized light.\n\n\n\nWe have now seen some effects of interference in layers of different thicknesses, and seen the effect of adding a highly reflective substrate. So we already have two strategies for light-trapping/improving the absorption in a solar cell: adding an anti-reflection coating (in example 1a), to reduce front-surface reflection and get more light into the cell, and adding a highly reflective layer at the back, to reduce loss through the back of the cell and keep light trapped in the cell."
  },
  {
    "objectID": "solar-cell-simulation/notebooks/1c-simple_cell.html",
    "href": "solar-cell-simulation/notebooks/1c-simple_cell.html",
    "title": "solcore-education",
    "section": "",
    "text": "In the first two scripts, we mostly focused on different optical models and how they can be applied to an Si cell. Here we will look at different electrical models, roughly in increasing order of how ‘realistic’ they are expected to be:\n\nTwo-diode model (2D)\nDetailed balance (DB)\nDepletion approximation (DA)\nPoisson drift-diffusion solver (PDD)\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom solcore.solar_cell import SolarCell, Layer, Junction\nfrom solcore.solar_cell_solver import solar_cell_solver\nfrom solcore.absorption_calculator import OptiStack, calculate_rat\n\nfrom solcore import material, si\n\nfrom solcore.interpolate import interp1d\n\n\n\nDefine some materials:\n\nGaAs = material(\"GaAs\")()\nAl2O3 = material(\"Al2O3\")()\nAg = material(\"Ag\")()\n\nwavelengths = si(np.linspace(300, 950, 200), \"nm\")\n\nWe are going to do an optical calculation first to get absorption for a GaAs layer; we will use this as an estimate for the EQE as input for the two-diode model.\n\nOS = OptiStack([Layer(si(\"3um\"), GaAs)], substrate=Ag)\n\nCalculate reflection/absorption/transmission (note that we have to give the wavelength to this function in nm rather than m!)\n\nRAT = calculate_rat(OS, wavelength=wavelengths*1e9, no_back_reflection=False)\n\nCreate a function which interpolates the absorption - note that we pass a function which returns the absorption when given a wavelength to the Junction, rather than a table of values!\n\neqe_func = interp1d(wavelengths, RAT[\"A\"])\n\n\n\n\nDefine the 2D junction with reasonable parameters for GaAs. The units of j01 and j01 are A/m^2. The units for the resistances are (Ohm m)^2. We use the standard ideality factors (1 and 2 respectively) for the two diodes:\n\ntwod_junction = Junction(kind='2D', n1=1, n2=2, j01=3e-17, j02=1e-7, Rseries=4e-3,\n                         Rshunt=1e4, eqe=eqe_func)\n\nDefine two instances of a detailed-balance type junction. In both cases, there will be a sharp absorption onset at the bandgap (1.42 eV for GaAs). By specifying A, we set the fraction of light above the bandgap that is absorbed (A = 1 means 100% absorption above the gap).\n\ndb_junction_A1 = Junction(kind='DB', Eg=1.42, A=1, R_shunt=1e4, n=3.5)\ndb_junction = Junction(kind='DB', Eg=1.42, A=0.8, R_shunt=1e4, n=3.5)\n\nV = np.linspace(0, 1.5, 200)\n\nSet some options and define solar cells based on these junctions:\n\nopts = {'voltages': V, 'light_iv': True, 'wavelength': wavelengths, 'mpp': True}\n\nsolar_cell_db_A1 = SolarCell([db_junction_A1])\nsolar_cell_db = SolarCell([db_junction])\nsolar_cell_2d = SolarCell([twod_junction])\n\nCalculate and plot the IV curves:\n\nsolar_cell_solver(solar_cell_db_A1, 'iv', user_options=opts)\nsolar_cell_solver(solar_cell_db, 'iv', user_options=opts)\nsolar_cell_solver(solar_cell_2d, 'iv', user_options=opts)\n\nSolving optics of the solar cell...\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nWarning: A junction of kind \"2D\" found. Junction ignored in the optics calculation!\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\n\n\nPLOT 1: IV curves for the DB and 2D models.\n\nplt.figure()\nplt.plot(*solar_cell_db_A1.iv[\"IV\"], label='Detailed balance (Eg = 1.44 eV, A = 1)')\nplt.plot(*solar_cell_db.iv[\"IV\"], label='Detailed balance (Eg = 1.44 eV, A = 0.8)')\nplt.plot(*solar_cell_2d.iv[\"IV\"], '--', label='Two-diode')\nplt.xlim(0, 1.5)\nplt.ylim(0, 500)\nplt.xlabel(\"V (V)\")\nplt.ylabel(\"J (A/m$^2$)\")\nplt.legend()\nplt.title('(1) IV curves calculated through detailed balance and two-diode models')\nplt.show()\n\n\n\n\nAs we expect, the two DB solar cells have a very similar shape, but the A = 1 case has a higher Jsc. The two-diode model has a lower current, which makes sense as it’s EQE is specified based on a more realistic absorption calculation which includes front-surface reflection and an absorption edge which is not infinitely sharp at the bandgap, as is assumed by the detailed balance model.\n\n\n\nNow let’s consider the two slightly more complex models, which will actually take into account the absorption profile of light in the cell and the distribution of charge carriers; the depletion approximation and the Poisson drift-diffusion solver.\nNote: for the PDD example to work, the PDD solver must be installed correctly; see the Solcore documentation for more information.\n\nT = 293 # ambient temperature\n\nwindow = material('AlGaAs')(T=T, Na=si(\"5e18cm-3\"), Al=0.8)\np_GaAs = material('GaAs')(T=T, Na=si(\"1e18cm-3\"), electron_diffusion_length=si(\"400nm\"))\nn_GaAs = material('GaAs')(T=T, Nd=si(\"8e16cm-3\"), hole_diffusion_length=si(\"8um\"))\nbsf = material('GaAs')(T=T, Nd=si(\"2e18cm-3\"))\n\nSC_layers = [Layer(width=si('150nm'), material=p_GaAs, role=\"Emitter\"),\n                   Layer(width=si('2850nm'), material=n_GaAs, role=\"Base\"),\n                   Layer(width=si('200nm'), material=bsf, role=\"BSF\")]\n\nsn and sp are the surface recombination velocities (in m/sec). sn is the SRV for the n-doped junction, sp for the p-doped junction.\n\n# Depletion approximation:\nsolar_cell_da = SolarCell(\n    [Layer(width=si(\"90nm\"), material=Al2O3), Layer(width=si('20nm'), material=window, role=\"Window\"),\n     Junction(SC_layers, sn=5e4, sp=5e4, kind='DA')],\n    R_series=0, substrate=Ag\n)\n\n\n# Drift-diffusion solver:\nsolar_cell_pdd = SolarCell(\n    [Layer(width=si(\"90nm\"), material=Al2O3), Layer(width=si('20nm'), material=window, role=\"Window\"),\n     Junction(SC_layers, sn=5e4, sp=5e4, kind='PDD')],\n    R_series=0, substrate=Ag\n)\n\nIn both cases, we set the series resistance to 0. Other loss factors, such as shading, are also assumed to be zero by default.\n\nopts[\"optics_method\"] = \"TMM\" # Use the transfer-matrix method to calculate the cell's optics\nopts[\"position\"] = 1e-10 # This is the spacing used when calculating the depth-dependent absorption (0.1 nm)\nopts[\"no_back_reflection\"] = False\n\nsolar_cell_solver(solar_cell_da, \"iv\", user_options=opts)\nsolar_cell_solver(solar_cell_da, \"qe\", user_options=opts)\n\nsolar_cell_solver(solar_cell_pdd, \"iv\", user_options=opts)\nsolar_cell_solver(solar_cell_pdd, \"qe\", user_options=opts)\n\nSolving optics of the solar cell...\nCalculating RAT...\nCalculating absorption profile...\n\n\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving QE of the solar cell...\n\n\n/Users/phoebe/Documents/develop/solcore5/solcore/analytic_solar_cells/depletion_approximation.py:617: RuntimeWarning:\n\ninvalid value encountered in true_divide\n\n\n\nSolving optics of the solar cell...\nCalculating RAT...\nCalculating absorption profile...\n\n\nSolving IV of the junctions...\nSolving IV...\nSolving equilibrium...\nProcessing structure...\n...done!\n\n CREATE MESH...\n Masternodes at (nm):\n       0.0\n     149.9\n     150.0\n    2999.9\n    3000.0\n    3200.0\n  \n Initial number of nodes (M+1):          299\n Refining mesh... \n ... Finished!\n Mesh with          105  nodes.\n ----------------------------------\n  \n Starting EQUILIBRIUM... \n Remeshing...  M+1 =          135  nodes.\n EQUILIBRIUM Output Code: Reached Absolute Tolerance.                       \n     Res:    5.55010459E-29\n Elapsed time =    4.97689992E-02 s\n  \n...done!\n\n\n\n...done!\n  \n Starting LIGHTSC... \n\n      step  Jtot (A/m^2)          Res          Res-h    Res Poisson     Res-e        Info\n         1   -0.2703E-18    0.3289E-19    0.9817E-22    0.6197E-28    0.3289E-19         2\n         2   -0.2703E-17    0.9766E-19    0.1149E-21    0.3541E-26    0.9766E-19         2\n         3   -0.2703E-16    0.2674E-19    0.1225E-20    0.3542E-24    0.2671E-19         2\n         4   -0.2703E-15    0.9640E-19    0.8997E-19    0.3547E-22    0.3463E-19         2\n         5   -0.2702E-14    0.9365E-17    0.9103E-17    0.3595E-20    0.2200E-17         2\n         6   -0.2703E-13    0.6059E-18    0.6032E-18    0.1519E-21    0.5643E-19         2\n         7   -0.2703E-12    0.1498E-16    0.1498E-16    0.2272E-20    0.2843E-18         2\n         8   -0.2703E-11    0.1607E-17    0.1582E-17    0.2959E-21    0.2819E-18         2\n         9   -0.2703E-10    0.1795E-17    0.1570E-17    0.3950E-21    0.8712E-18         2\n        10   -0.2703E-09    0.3941E-19    0.1360E-19    0.1123E-25    0.3699E-19         2\n        11   -0.2703E-08    0.2068E-18    0.1456E-18    0.1315E-24    0.1469E-18         2\n        12   -0.2703E-07    0.2071E-17    0.1466E-17    0.1336E-23    0.1463E-17         2\n        13   -0.2703E-06    0.2073E-16    0.1467E-16    0.1338E-22    0.1464E-16         2\n        14   -0.2703E-05    0.9740E-19    0.5797E-19    0.4274E-28    0.7828E-19         2\n        15   -0.2703E-04    0.8229E-18    0.5797E-18    0.1930E-27    0.5841E-18         2\n        16   -0.2703E-03    0.8193E-17    0.5797E-17    0.1706E-26    0.5790E-17         2\n        17   -0.2703E-02    0.4485E-19    0.1383E-19    0.3302E-28    0.4266E-19         2\n        18   -0.2703E-01    0.2027E-18    0.1383E-18    0.7052E-28    0.1482E-18         2\n        19   -0.2703        0.1955E-17    0.1383E-17    0.2986E-28    0.1381E-17         2\n        20    -2.703        0.1955E-16    0.1383E-16    0.4849E-28    0.1382E-16         2\n        21    -27.03        0.9171E-19    0.2627E-19    0.3431E-28    0.8787E-19         2\n        22    -270.3        0.3768E-18    0.2622E-18    0.2825E-28    0.2707E-18         2\n LIGHTSC Output Code: Reached Absolute Tolerance.                       \n     Res:    3.76834174E-19\n     J:   -270.300262      A/m2\n     V:    1.38166822E-09  V\n Elapsed time =   0.912029028     s\n  \n  \n Starting RUNIV... \n nvolt   nit   info    Vapp       Jtot (A/m^2)       Res\n     0     1     2   0.00000      -270.300      0.450185E-19\n     1     7     2  0.100100E-01  -270.285      0.557644E-18\n     2     7     2  0.200200E-01  -270.270      0.555465E-18\n     3     7     2  0.300300E-01  -270.254      0.554833E-18\n     4     7     2  0.400400E-01  -270.239      0.554198E-18\n     5     7     2  0.500501E-01  -270.223      0.558092E-18\n     6     7     2  0.600601E-01  -270.207      0.553061E-18\n     7     7     2  0.700701E-01  -270.192      0.552682E-18\n     8     7     2  0.800801E-01  -270.176      0.551684E-18\n     9     7     2  0.900901E-01  -270.160      0.553204E-18\n    10     7     2  0.100100      -270.144      0.550230E-18\n    11     7     2  0.110110      -270.128      0.552847E-18\n    12     7     2  0.120120      -270.112      0.549306E-18\n    13     7     2  0.130130      -270.096      0.554059E-18\n    14     7     2  0.140140      -270.080      0.547399E-18\n    15     7     2  0.150150      -270.063      0.553312E-18\n    16     7     2  0.160160      -270.047      0.545997E-18\n    17     7     2  0.170170      -270.030      0.551923E-18\n    18     7     2  0.180180      -270.014      0.543551E-18\n    19     7     2  0.190190      -269.997      0.544135E-18\n    20     7     2  0.200200      -269.980      0.545816E-18\n    21     7     2  0.210210      -269.964      0.540715E-18\n    22     7     2  0.220220      -269.947      0.539658E-18\n    23     7     2  0.230230      -269.930      0.538678E-18\n    24     7     2  0.240240      -269.913      0.537382E-18\n    25     7     2  0.250250      -269.895      0.537613E-18\n    26     7     2  0.260260      -269.878      0.535238E-18\n    27     7     2  0.270270      -269.861      0.537520E-18\n    28     7     2  0.280280      -269.843      0.532900E-18\n    29     7     2  0.290290      -269.826      0.536493E-18\n    30     7     2  0.300300      -269.808      0.531174E-18\n    31     7     2  0.310310      -269.790      0.532822E-18\n    32     7     2  0.320320      -269.772      0.528064E-18\n    33     7     2  0.330330      -269.754      0.527872E-18\n    34     7     2  0.340340      -269.736      0.531578E-18\n    35     7     2  0.350350      -269.718      0.523944E-18\n    36     7     2  0.360360      -269.700      0.522723E-18\n    37     7     2  0.370370      -269.681      0.522006E-18\n    38     7     2  0.380380      -269.663      0.519390E-18\n    39     7     2  0.390390      -269.644      0.519499E-18\n    40     7     2  0.400400      -269.625      0.517919E-18\n    41     7     2  0.410410      -269.606      0.514753E-18\n    42     7     2  0.420420      -269.587      0.513976E-18\n    43     7     2  0.430430      -269.568      0.511044E-18\n    44     7     2  0.440440      -269.549      0.509830E-18\n    45     7     2  0.450450      -269.529      0.508942E-18\n    46     7     2  0.460460      -269.510      0.506088E-18\n    47     7     2  0.470470      -269.490      0.506341E-18\n    48     7     2  0.480480      -269.470      0.501798E-18\n    49     7     2  0.490490      -269.450      0.500856E-18\n    50     7     2  0.500501      -269.430      0.498631E-18\n    51     7     2  0.510511      -269.410      0.499235E-18\n    52     7     2  0.520521      -269.389      0.494106E-18\n    53     7     2  0.530531      -269.369      0.495517E-18\n    54     7     2  0.540541      -269.348      0.489060E-18\n    55     7     2  0.550551      -269.327      0.488074E-18\n    56     7     2  0.560561      -269.306      0.487225E-18\n    57     7     2  0.570571      -269.285      0.482332E-18\n    58     7     2  0.580581      -269.263      0.482115E-18\n    59     7     2  0.590591      -269.241      0.476790E-18\n    60     7     2  0.600601      -269.220      0.481449E-18\n    61     7     2  0.610611      -269.197      0.472458E-18\n    62     7     2  0.620621      -269.175      0.470882E-18\n    63     7     2  0.630631      -269.152      0.471002E-18\n    64     7     2  0.640641      -269.129      0.463080E-18\n    65     7     2  0.650651      -269.106      0.461098E-18\n    66     7     2  0.660661      -269.082      0.462214E-18\n    67     7     2  0.670671      -269.058      0.454485E-18\n    68     7     2  0.680681      -269.033      0.450503E-18\n    69     7     2  0.690691      -269.007      0.451871E-18\n    70     7     2  0.700701      -268.980      0.451011E-18\n    71     7     2  0.710711      -268.952      0.447901E-18\n    72     7     2  0.720721      -268.921      0.437723E-18\n    73     7     2  0.730731      -268.887      0.440464E-18\n    74     7     2  0.740741      -268.848      0.430234E-18\n    75     7     2  0.750751      -268.803      0.429160E-18\n    76     7     2  0.760761      -268.748      0.420778E-18\n    77     7     2  0.770771      -268.680      0.416501E-18\n    78     7     2  0.780781      -268.591      0.411720E-18\n    79     7     2  0.790791      -268.473      0.406112E-18\n    80     7     2  0.800801      -268.311      0.399488E-18\n    81     7     2  0.810811      -268.086      0.397994E-18\n    82     7     2  0.820821      -267.767      0.382765E-18\n    83     7     2  0.830831      -267.311      0.374347E-18\n    84     7     2  0.840841      -266.654      0.367084E-18\n    85     7     2  0.850851      -265.699      0.343455E-18\n    86     7     2  0.860861      -264.308      0.330813E-18\n    87     7     2  0.870871      -262.274      0.299027E-18\n    88     7     2  0.880881      -259.293      0.273807E-18\n    89     7     2  0.890891      -254.921      0.232832E-18\n    90     7     2  0.900901      -248.498      0.202406E-18\n    91     7     2  0.910911      -239.057      0.145136E-18\n    92     7     2  0.920921      -225.172      0.105149E-18\n    93     7     2  0.930931      -204.745      0.745406E-19\n    94     7     2  0.940941      -174.684      0.939804E-19\n    95     7     2  0.950951      -130.439      0.285790E-19\n    96     6     2  0.960961      -65.3093      0.202662E-16\n    97     6     2  0.970971       30.5738      0.412098E-17\n    98     6     2  0.980981       171.740      0.535724E-17\n    99     6     2  0.990991       379.584      0.911952E-17\n   100     6     2   1.00100       685.611      0.117351E-16\n   101     6     2   1.01101       1136.21      0.125744E-16\n   102     6     2   1.02102       1799.67      0.107706E-16\n   103     6     2   1.03103       2776.58      0.743563E-17\n   104     6     2   1.04104       4214.99      0.152404E-16\n   105     7     2   1.05105       6332.87      0.672464E-19\n   106     7     2   1.06106       9451.12      0.324305E-19\n   107     7     2   1.07107       14042.0      0.429233E-19\n   108     7     2   1.08108       20800.6      0.635027E-19\n   109     7     2   1.09109       30749.3      0.100021E-18\n   110     7     2   1.10110       45391.9      0.178986E-18\n   111     7     2   1.11111       66938.2      0.274396E-18\n   112     7     2   1.12112       98633.3      0.416153E-18\n   113     7     2   1.13113       145236.      0.626955E-18\n   114     7     2   1.14114       213715.      0.897153E-18\n   115     7     2   1.15115       314243.      0.119264E-17\n   116     7     2   1.16116       461620.      0.142293E-17\n   117     7     2   1.17117       677267.      0.142902E-17\n   118     7     2   1.18118       991954.      0.103926E-17\n   119     7     2   1.19119      0.144946E+07  0.175633E-18\n   120     7     2   1.20120      0.211122E+07  0.113773E-17\n   121     7     2   1.21121      0.306207E+07  0.270762E-17\n   122     7     2   1.22122      0.441663E+07  0.453397E-17\n   123     7     2   1.23123      0.632624E+07  0.689539E-17\n   124     7     2   1.24124      0.898558E+07  0.104969E-16\n   125     7     2   1.25125      0.126389E+08  0.168047E-16\n   126     7     2   1.26126      0.175854E+08  0.290275E-16\n   127     8     2   1.27127      0.241839E+08  0.442965E-19\n   128     8     2   1.28128      0.328561E+08  0.402304E-19\n   129     8     2   1.29129      0.440874E+08  0.613707E-19\n   130     8     2   1.30130      0.584249E+08  0.131208E-18\n   131     8     2   1.31131      0.764708E+08  0.323581E-18\n   132     8     2   1.32132      0.988714E+08  0.880818E-18\n   133     8     2   1.33133      0.126303E+09  0.243478E-17\n   134     8     2   1.34134      0.159451E+09  0.676198E-17\n   135     8     2   1.35135      0.198994E+09  0.186557E-16\n   136     9     2   1.36136      0.245579E+09  0.359817E-19\n   137     9     2   1.37137      0.299806E+09  0.107119E-18\n   138     9     2   1.38138      0.362209E+09  0.173255E-18\n   139     9     2   1.39139      0.433245E+09  0.464352E-18\n   140     9     2   1.40140      0.513285E+09  0.941107E-18\n   141     9     2   1.41141      0.602608E+09  0.260113E-17\n   142    10     2   1.42142      0.701406E+09  0.140995E-18\n   143    12     2   1.43143      0.809781E+09  0.486102E-17\n   144    16     2   1.44144      0.927753E+09  0.612565E-19\n   145    11     2   1.45145      0.105527E+10  0.295003E-18\n   146    10     2   1.46146      0.119220E+10  0.330150E-17\n   147    10     2   1.47147      0.133839E+10  0.450385E-18\n   148    10     2   1.48148      0.149358E+10  0.133760E-18\n   149    10     2   1.49149      0.165753E+10  0.887937E-19\n   150     9     2   1.50150      0.182992E+10  0.311404E-16\n Elapsed time =    5.14868307     s\n  \nSolving equilibrium...\nProcessing structure...\n...done!\n\n CREATE MESH...\n Masternodes at (nm):\n       0.0\n     149.9\n     150.0\n    2999.9\n    3000.0\n    3200.0\n...done!\n  \n Initial number of nodes (M+1):          299\n Refining mesh... \n ... Finished!\n Mesh with          105  nodes.\n ----------------------------------\n  \n Starting EQUILIBRIUM... \n Remeshing...  M+1 =          135  nodes.\n EQUILIBRIUM Output Code: Reached Absolute Tolerance.                       \n     Res:    5.55010459E-29\n Elapsed time =    4.94190007E-02 s\n  \n\n  \n Starting LIGHTSC... \n\n\n...done!\n      step  Jtot (A/m^2)          Res          Res-h    Res Poisson     Res-e        Info\n         1   -0.2703E-18    0.3289E-19    0.9817E-22    0.6197E-28    0.3289E-19         2\n         2   -0.2703E-17    0.9766E-19    0.1149E-21    0.3541E-26    0.9766E-19         2\n         3   -0.2703E-16    0.2674E-19    0.1225E-20    0.3542E-24    0.2671E-19         2\n         4   -0.2703E-15    0.9640E-19    0.8997E-19    0.3547E-22    0.3463E-19         2\n         5   -0.2702E-14    0.9365E-17    0.9103E-17    0.3595E-20    0.2200E-17         2\n         6   -0.2703E-13    0.6059E-18    0.6032E-18    0.1519E-21    0.5643E-19         2\n         7   -0.2703E-12    0.1498E-16    0.1498E-16    0.2272E-20    0.2843E-18         2\n         8   -0.2703E-11    0.1607E-17    0.1582E-17    0.2959E-21    0.2819E-18         2\n         9   -0.2703E-10    0.1795E-17    0.1570E-17    0.3950E-21    0.8712E-18         2\n        10   -0.2703E-09    0.3941E-19    0.1360E-19    0.1123E-25    0.3699E-19         2\n        11   -0.2703E-08    0.2068E-18    0.1456E-18    0.1315E-24    0.1469E-18         2\n        12   -0.2703E-07    0.2071E-17    0.1466E-17    0.1336E-23    0.1463E-17         2\n        13   -0.2703E-06    0.2073E-16    0.1467E-16    0.1338E-22    0.1464E-16         2\n        14   -0.2703E-05    0.9740E-19    0.5797E-19    0.4274E-28    0.7828E-19         2\n        15   -0.2703E-04    0.8229E-18    0.5797E-18    0.1930E-27    0.5841E-18         2\n        16   -0.2703E-03    0.8193E-17    0.5797E-17    0.1706E-26    0.5790E-17         2\n        17   -0.2703E-02    0.4485E-19    0.1383E-19    0.3302E-28    0.4266E-19         2\n        18   -0.2703E-01    0.2027E-18    0.1383E-18    0.7052E-28    0.1482E-18         2\n        19   -0.2703        0.1955E-17    0.1383E-17    0.2986E-28    0.1381E-17         2\n        20    -2.703        0.1955E-16    0.1383E-16    0.4849E-28    0.1382E-16         2\n        21    -27.03        0.9171E-19    0.2627E-19    0.3431E-28    0.8787E-19         2\n        22    -270.3        0.3768E-18    0.2622E-18    0.2825E-28    0.2707E-18         2\n LIGHTSC Output Code: Reached Absolute Tolerance.                       \n     Res:    3.76834174E-19\n     J:   -270.300262      A/m2\n     V:    1.38166822E-09  V\n Elapsed time =   0.908883989     s\n  \n\n\n\n...done!\n  \n Starting RUNIV... \n nvolt   nit   info    Vapp       Jtot (A/m^2)       Res\n     0     1     2   0.00000      -270.300      0.450185E-19\n     1     7     2 -0.100100E-01  -270.316      0.137473E-17\n     2     7     2 -0.200200E-01  -270.331      0.137769E-17\n     3     7     2 -0.300300E-01  -270.346      0.137917E-17\n     4     7     2 -0.400400E-01  -270.361      0.138124E-17\n     5     7     2 -0.500501E-01  -270.376      0.138387E-17\n     6     7     2 -0.600601E-01  -270.391      0.138500E-17\n     7     7     2 -0.700701E-01  -270.406      0.138668E-17\n     8     7     2 -0.800801E-01  -270.420      0.138898E-17\n     9     7     2 -0.900901E-01  -270.435      0.139045E-17\n    10     7     2 -0.100100      -270.450      0.139203E-17\n    11     7     2 -0.110110      -270.464      0.139372E-17\n    12     7     2 -0.120120      -270.479      0.139603E-17\n    13     7     2 -0.130130      -270.493      0.139701E-17\n    14     7     2 -0.140140      -270.508      0.139857E-17\n    15     7     2 -0.150150      -270.522      0.139990E-17\n    16     7     2 -0.160160      -270.536      0.140291E-17\n    17     7     2 -0.170170      -270.551      0.140378E-17\n    18     7     2 -0.180180      -270.565      0.140436E-17\n    19     7     2 -0.190190      -270.579      0.140563E-17\n    20     7     2 -0.200200      -270.593      0.140722E-17\n    21     7     2 -0.210210      -270.607      0.140846E-17\n    22     7     2 -0.220220      -270.621      0.141017E-17\n    23     7     2 -0.230230      -270.635      0.141261E-17\n    24     7     2 -0.240240      -270.648      0.141230E-17\n    25     7     2 -0.250250      -270.662      0.141411E-17\n    26     7     2 -0.260260      -270.676      0.141565E-17\n    27     7     2 -0.270270      -270.689      0.141607E-17\n    28     7     2 -0.280280      -270.703      0.141783E-17\n    29     7     2 -0.290290      -270.716      0.141811E-17\n    30     7     2 -0.300300      -270.730      0.141957E-17\n    31     7     2 -0.310310      -270.743      0.142013E-17\n    32     7     2 -0.320320      -270.757      0.142140E-17\n    33     7     2 -0.330330      -270.770      0.142271E-17\n    34     7     2 -0.340340      -270.783      0.142310E-17\n    35     7     2 -0.350350      -270.796      0.142538E-17\n    36     7     2 -0.360360      -270.809      0.142669E-17\n    37     7     2 -0.370370      -270.822      0.142594E-17\n    38     7     2 -0.380380      -270.835      0.142647E-17\n    39     7     2 -0.390390      -270.848      0.142725E-17\n    40     7     2 -0.400400      -270.861      0.143153E-17\n    41     7     2 -0.410410      -270.874      0.142905E-17\n    42     7     2 -0.420420      -270.887      0.142978E-17\n    43     7     2 -0.430430      -270.900      0.143249E-17\n    44     7     2 -0.440440      -270.912      0.143242E-17\n    45     7     2 -0.450450      -270.925      0.143222E-17\n    46     7     2 -0.460460      -270.938      0.143398E-17\n    47     7     2 -0.470470      -270.950      0.143492E-17\n    48     7     2 -0.480480      -270.963      0.143362E-17\n    49     7     2 -0.490490      -270.975      0.143444E-17\n    50     7     2 -0.500501      -270.988      0.143493E-17\n    51     7     2 -0.510511      -271.000      0.143574E-17\n    52     7     2 -0.520521      -271.013      0.143582E-17\n    53     7     2 -0.530531      -271.025      0.143826E-17\n    54     7     2 -0.540541      -271.037      0.143694E-17\n    55     7     2 -0.550551      -271.050      0.143743E-17\n    56     7     2 -0.560561      -271.062      0.143901E-17\n    57     7     2 -0.570571      -271.074      0.143870E-17\n    58     7     2 -0.580581      -271.087      0.143943E-17\n    59     7     2 -0.590591      -271.099      0.143887E-17\n    60     7     2 -0.600601      -271.111      0.143956E-17\n    61     7     2 -0.610611      -271.123      0.143965E-17\n    62     7     2 -0.620621      -271.136      0.144021E-17\n    63     7     2 -0.630631      -271.148      0.144132E-17\n    64     7     2 -0.640641      -271.160      0.144042E-17\n    65     7     2 -0.650651      -271.172      0.144148E-17\n    66     7     2 -0.660661      -271.184      0.144087E-17\n    67     7     2 -0.670671      -271.196      0.144207E-17\n    68     7     2 -0.680681      -271.208      0.144119E-17\n    69     7     2 -0.690691      -271.220      0.144140E-17\n    70     7     2 -0.700701      -271.232      0.144183E-17\n    71     7     2 -0.710711      -271.244      0.144169E-17\n    72     7     2 -0.720721      -271.256      0.144171E-17\n    73     7     2 -0.730731      -271.268      0.144182E-17\n    74     7     2 -0.740741      -271.280      0.144245E-17\n    75     7     2 -0.750751      -271.292      0.144199E-17\n    76     7     2 -0.760761      -271.304      0.144283E-17\n    77     7     2 -0.770771      -271.316      0.144224E-17\n    78     7     2 -0.780781      -271.328      0.144259E-17\n    79     7     2 -0.790791      -271.339      0.144210E-17\n    80     7     2 -0.800801      -271.351      0.144181E-17\n    81     7     2 -0.810811      -271.363      0.144215E-17\n    82     7     2 -0.820821      -271.375      0.144175E-17\n    83     7     2 -0.830831      -271.387      0.144373E-17\n    84     7     2 -0.840841      -271.398      0.144251E-17\n    85     7     2 -0.850851      -271.410      0.144201E-17\n    86     7     2 -0.860861      -271.422      0.144346E-17\n    87     7     2 -0.870871      -271.433      0.144208E-17\n    88     7     2 -0.880881      -271.445      0.144316E-17\n    89     7     2 -0.890891      -271.456      0.144374E-17\n    90     7     2 -0.900901      -271.468      0.144159E-17\n    91     7     2 -0.910911      -271.479      0.144061E-17\n    92     7     2 -0.920921      -271.491      0.144097E-17\n    93     7     2 -0.930931      -271.502      0.143998E-17\n    94     7     2 -0.940941      -271.513      0.144005E-17\n    95     7     2 -0.950951      -271.525      0.143987E-17\n    96     7     2 -0.960961      -271.536      0.144108E-17\n    97     7     2 -0.970971      -271.547      0.143905E-17\n    98     7     2 -0.980981      -271.558      0.143876E-17\n    99     7     2 -0.990991      -271.569      0.143869E-17\n   100     7     2  -1.00100      -271.580      0.143901E-17\n   101     7     2  -1.01101      -271.591      0.143836E-17\n   102     7     2  -1.02102      -271.602      0.143793E-17\n   103     7     2  -1.03103      -271.613      0.143814E-17\n   104     7     2  -1.04104      -271.624      0.143736E-17\n   105     7     2  -1.05105      -271.635      0.143707E-17\n   106     7     2  -1.06106      -271.646      0.143706E-17\n   107     7     2  -1.07107      -271.656      0.143660E-17\n   108     7     2  -1.08108      -271.667      0.143633E-17\n   109     7     2  -1.09109      -271.677      0.143616E-17\n   110     7     2  -1.10110      -271.688      0.143675E-17\n   111     7     2  -1.11111      -271.698      0.143572E-17\n   112     7     2  -1.12112      -271.709      0.143578E-17\n   113     7     2  -1.13113      -271.719      0.143633E-17\n   114     7     2  -1.14114      -271.729      0.143495E-17\n   115     7     2  -1.15115      -271.740      0.143496E-17\n   116     7     2  -1.16116      -271.750      0.143472E-17\n   117     7     2  -1.17117      -271.760      0.143425E-17\n   118     7     2  -1.18118      -271.770      0.143429E-17\n   119     7     2  -1.19119      -271.780      0.143364E-17\n   120     7     2  -1.20120      -271.790      0.143364E-17\n   121     7     2  -1.21121      -271.800      0.143361E-17\n   122     7     2  -1.22122      -271.810      0.143343E-17\n   123     7     2  -1.23123      -271.820      0.143384E-17\n   124     7     2  -1.24124      -271.830      0.143439E-17\n   125     7     2  -1.25125      -271.839      0.143354E-17\n   126     7     2  -1.26126      -271.849      0.143262E-17\n   127     7     2  -1.27127      -271.859      0.143213E-17\n   128     7     2  -1.28128      -271.869      0.143158E-17\n   129     7     2  -1.29129      -271.878      0.143169E-17\n   130     7     2  -1.30130      -271.888      0.143192E-17\n   131     7     2  -1.31131      -271.897      0.143088E-17\n   132     7     2  -1.32132      -271.907      0.143134E-17\n   133     7     2  -1.33133      -271.916      0.143026E-17\n   134     7     2  -1.34134      -271.926      0.143006E-17\n   135     7     2  -1.35135      -271.935      0.143088E-17\n   136     7     2  -1.36136      -271.945      0.143008E-17\n   137     7     2  -1.37137      -271.954      0.143286E-17\n   138     7     2  -1.38138      -271.963      0.143202E-17\n   139     7     2  -1.39139      -271.973      0.142883E-17\n   140     7     2  -1.40140      -271.982      0.142829E-17\n   141     7     2  -1.41141      -271.991      0.142991E-17\n   142     7     2  -1.42142      -272.000      0.142775E-17\n   143     7     2  -1.43143      -272.010      0.142743E-17\n   144     7     2  -1.44144      -272.019      0.142753E-17\n   145     7     2  -1.45145      -272.028      0.142684E-17\n   146     7     2  -1.46146      -272.037      0.142656E-17\n   147     7     2  -1.47147      -272.046      0.142704E-17\n   148     7     2  -1.48148      -272.056      0.142837E-17\n   149     7     2  -1.49149      -272.065      0.142559E-17\n   150     7     2  -1.50150      -272.074      0.142522E-17\n   151     7     2  -1.51151      -272.083      0.142490E-17\n   152     7     2  -1.52152      -272.092      0.142464E-17\n   153     7     2  -1.53153      -272.101      0.142557E-17\n   154     7     2  -1.54154      -272.110      0.142403E-17\n   155     7     2  -1.55155      -272.119      0.142366E-17\n   156     7     2  -1.56156      -272.128      0.142688E-17\n   157     7     2  -1.57157      -272.137      0.142279E-17\n   158     7     2  -1.58158      -272.146      0.142252E-17\n   159     7     2  -1.59159      -272.155      0.142216E-17\n   160     7     2  -1.60160      -272.165      0.142185E-17\n   161     7     2  -1.61161      -272.174      0.142144E-17\n   162     7     2  -1.62162      -272.183      0.142102E-17\n   163     7     2  -1.63163      -272.192      0.142319E-17\n   164     7     2  -1.64164      -272.201      0.142015E-17\n   165     7     2  -1.65165      -272.210      0.142053E-17\n   166     7     2  -1.66166      -272.219      0.142136E-17\n   167     7     2  -1.67167      -272.228      0.141914E-17\n   168     7     2  -1.68168      -272.237      0.141857E-17\n   169     7     2  -1.69169      -272.245      0.141820E-17\n   170     7     2  -1.70170      -272.254      0.141771E-17\n   171     7     2  -1.71171      -272.263      0.141816E-17\n   172     7     2  -1.72172      -272.272      0.141953E-17\n   173     7     2  -1.73173      -272.281      0.141604E-17\n   174     7     2  -1.74174      -272.290      0.141834E-17\n   175     7     2  -1.75175      -272.299      0.141497E-17\n   176     7     2  -1.76176      -272.308      0.141528E-17\n   177     7     2  -1.77177      -272.317      0.141489E-17\n   178     7     2  -1.78178      -272.326      0.141344E-17\n   179     7     2  -1.79179      -272.335      0.141421E-17\n   180     7     2  -1.80180      -272.344      0.141532E-17\n   181     7     2  -1.81181      -272.353      0.141226E-17\n   182     7     2  -1.82182      -272.362      0.141123E-17\n   183     7     2  -1.83183      -272.371      0.141133E-17\n   184     7     2  -1.84184      -272.380      0.141050E-17\n   185     7     2  -1.85185      -272.389      0.141029E-17\n   186     7     2  -1.86186      -272.398      0.141081E-17\n   187     7     2  -1.87187      -272.407      0.140833E-17\n   188     7     2  -1.88188      -272.416      0.140862E-17\n   189     7     2  -1.89189      -272.425      0.140821E-17\n   190     7     2  -1.90190      -272.434      0.140703E-17\n   191     7     2  -1.91191      -272.443      0.140617E-17\n   192     7     2  -1.92192      -272.452      0.140617E-17\n   193     7     2  -1.93193      -272.461      0.140441E-17\n   194     7     2  -1.94194      -272.470      0.140395E-17\n   195     7     2  -1.95195      -272.479      0.140307E-17\n   196     7     2  -1.96196      -272.489      0.140371E-17\n   197     7     2  -1.97197      -272.498      0.140227E-17\n   198     7     2  -1.98198      -272.507      0.140088E-17\n   199     7     2  -1.99199      -272.516      0.140016E-17\n   200     7     2  -2.00200      -272.525      0.139950E-17\n   201     7     2  -2.01201      -272.534      0.140057E-17\n   202     7     2  -2.02202      -272.543      0.139808E-17\n   203     7     2  -2.03203      -272.552      0.140157E-17\n   204     7     2  -2.04204      -272.561      0.139736E-17\n   205     7     2  -2.05205      -272.570      0.139579E-17\n   206     7     2  -2.06206      -272.579      0.139561E-17\n   207     7     2  -2.07207      -272.589      0.139468E-17\n   208     7     2  -2.08208      -272.598      0.139527E-17\n   209     7     2  -2.09209      -272.607      0.139261E-17\n   210     7     2  -2.10210      -272.616      0.139163E-17\n   211     7     2  -2.11211      -272.625      0.139068E-17\n   212     7     2  -2.12212      -272.634      0.138982E-17\n   213     7     2  -2.13213      -272.643      0.138974E-17\n   214     7     2  -2.14214      -272.653      0.138976E-17\n   215     7     2  -2.15215      -272.662      0.138714E-17\n   216     7     2  -2.16216      -272.671      0.138671E-17\n   217     7     2  -2.17217      -272.680      0.138614E-17\n   218     7     2  -2.18218      -272.689      0.138508E-17\n   219     7     2  -2.19219      -272.698      0.138562E-17\n   220     7     2  -2.20220      -272.708      0.138275E-17\n   221     7     2  -2.21221      -272.717      0.138245E-17\n   222     7     2  -2.22222      -272.726      0.138090E-17\n   223     7     2  -2.23223      -272.735      0.138007E-17\n   224     7     2  -2.24224      -272.744      0.137980E-17\n   225     7     2  -2.25225      -272.753      0.137792E-17\n   226     7     2  -2.26226      -272.762      0.137797E-17\n   227     7     2  -2.27227      -272.772      0.137989E-17\n   228     7     2  -2.28228      -272.781      0.137484E-17\n   229     7     2  -2.29229      -272.790      0.137389E-17\n   230     7     2  -2.30230      -272.799      0.137512E-17\n   231     7     2  -2.31231      -272.808      0.137190E-17\n   232     7     2  -2.32232      -272.817      0.137464E-17\n   233     7     2  -2.33233      -272.826      0.136998E-17\n   234     7     2  -2.34234      -272.835      0.137151E-17\n   235     7     2  -2.35235      -272.844      0.137034E-17\n   236     7     2  -2.36236      -272.853      0.136852E-17\n   237     7     2  -2.37237      -272.862      0.136664E-17\n   238     7     2  -2.38238      -272.871      0.136569E-17\n   239     7     2  -2.39239      -272.879      0.136579E-17\n   240     7     2  -2.40240      -272.888      0.136355E-17\n   241     7     2  -2.41241      -272.897      0.136453E-17\n   242     7     2  -2.42242      -272.906      0.136132E-17\n   243     7     2  -2.43243      -272.914      0.136048E-17\n   244     7     2  -2.44244      -272.923      0.135933E-17\n   245     7     2  -2.45245      -272.932      0.135846E-17\n   246     7     2  -2.46246      -272.940      0.135770E-17\n   247     7     2  -2.47247      -272.949      0.135657E-17\n   248     7     2  -2.48248      -272.957      0.135564E-17\n   249     7     2  -2.49249      -272.966      0.135539E-17\n   250     7     2  -2.50250      -272.974      0.135410E-17\n   251     7     2  -2.51251      -272.982      0.135340E-17\n   252     7     2  -2.52252      -272.990      0.135319E-17\n   253     7     2  -2.53253      -272.999      0.135242E-17\n   254     7     2  -2.54254      -273.007      0.135056E-17\n   255     7     2  -2.55255      -273.015      0.135043E-17\n   256     7     2  -2.56256      -273.023      0.134893E-17\n   257     7     2  -2.57257      -273.031      0.134880E-17\n   258     7     2  -2.58258      -273.039      0.134763E-17\n   259     7     2  -2.59259      -273.047      0.134714E-17\n   260     7     2  -2.60260      -273.055      0.134679E-17\n   261     7     2  -2.61261      -273.062      0.134599E-17\n   262     7     2  -2.62262      -273.070      0.134442E-17\n   263     7     2  -2.63263      -273.078      0.134469E-17\n   264     7     2  -2.64264      -273.086      0.134508E-17\n   265     7     2  -2.65265      -273.093      0.134336E-17\n   266     7     2  -2.66266      -273.101      0.134437E-17\n   267     7     2  -2.67267      -273.108      0.134236E-17\n   268     7     2  -2.68268      -273.116      0.134034E-17\n   269     7     2  -2.69269      -273.123      0.133941E-17\n   270     7     2  -2.70270      -273.130      0.133870E-17\n   271     7     2  -2.71271      -273.138      0.133919E-17\n   272     7     2  -2.72272      -273.145      0.133780E-17\n   273     7     2  -2.73273      -273.152      0.133674E-17\n   274     7     2  -2.74274      -273.160      0.133670E-17\n   275     7     2  -2.75275      -273.167      0.133552E-17\n   276     7     2  -2.76276      -273.174      0.133550E-17\n   277     7     2  -2.77277      -273.181      0.133478E-17\n   278     7     2  -2.78278      -273.188      0.133601E-17\n   279     7     2  -2.79279      -273.195      0.133418E-17\n   280     7     2  -2.80280      -273.202      0.133489E-17\n   281     7     2  -2.81281      -273.209      0.133270E-17\n   282     7     2  -2.82282      -273.216      0.133284E-17\n   283     7     2  -2.83283      -273.223      0.133216E-17\n   284     7     2  -2.84284      -273.230      0.133014E-17\n   285     7     2  -2.85285      -273.237      0.132980E-17\n   286     7     2  -2.86286      -273.244      0.132923E-17\n   287     7     2  -2.87287      -273.251      0.133068E-17\n   288     7     2  -2.88288      -273.258      0.132801E-17\n   289     7     2  -2.89289      -273.264      0.132768E-17\n   290     7     2  -2.90290      -273.271      0.132746E-17\n   291     7     2  -2.91291      -273.278      0.132689E-17\n   292     7     2  -2.92292      -273.285      0.132761E-17\n   293     7     2  -2.93293      -273.291      0.132750E-17\n   294     7     2  -2.94294      -273.298      0.132465E-17\n   295     7     2  -2.95295      -273.305      0.132522E-17\n   296     7     2  -2.96296      -273.311      0.132500E-17\n   297     7     2  -2.97297      -273.318      0.132308E-17\n   298     7     2  -2.98298      -273.325      0.132266E-17\n   299     7     2  -2.99299      -273.331      0.132213E-17\n   300     7     2  -3.00300      -273.338      0.132362E-17\n   301     7     2  -3.01301      -273.345      0.132219E-17\n   302     7     2  -3.02302      -273.351      0.132234E-17\n   303     7     2  -3.03303      -273.358      0.132127E-17\n   304     7     2  -3.04304      -273.364      0.131969E-17\n   305     7     2  -3.05305      -273.371      0.132112E-17\n   306     7     2  -3.06306      -273.377      0.131913E-17\n   307     7     2  -3.07307      -273.384      0.131869E-17\n   308     7     2  -3.08308      -273.390      0.131745E-17\n   309     7     2  -3.09309      -273.397      0.131743E-17\n   310     7     2  -3.10310      -273.403      0.131945E-17\n   311     7     2  -3.11311      -273.410      0.131623E-17\n   312     7     2  -3.12312      -273.416      0.131594E-17\n   313     7     2  -3.13313      -273.423      0.131542E-17\n   314     7     2  -3.14314      -273.429      0.131516E-17\n   315     7     2  -3.15315      -273.436      0.131434E-17\n   316     7     2  -3.16316      -273.442      0.131384E-17\n   317     7     2  -3.17317      -273.449      0.131390E-17\n   318     7     2  -3.18318      -273.455      0.131352E-17\n   319     7     2  -3.19319      -273.461      0.131353E-17\n   320     7     2  -3.20320      -273.468      0.131264E-17\n   321     7     2  -3.21321      -273.474      0.131363E-17\n   322     7     2  -3.22322      -273.481      0.131072E-17\n   323     7     2  -3.23323      -273.487      0.131295E-17\n   324     7     2  -3.24324      -273.493      0.130970E-17\n   325     7     2  -3.25325      -273.500      0.131022E-17\n   326     7     2  -3.26326      -273.506      0.130861E-17\n   327     7     2  -3.27327      -273.512      0.130\n867E-17\n   328     7     2  -3.28328      -273.519      0.130786E-17\n   329     7     2  -3.29329      -273.525      0.130706E-17\n   330     7     2  -3.30330      -273.531      0.130652E-17\n   331     7     2  -3.31331      -273.538      0.130609E-17\n   332     7     2  -3.32332      -273.544      0.130589E-17\n   333     7     2  -3.33333      -273.550      0.130506E-17\n   334     7     2  -3.34334      -273.557      0.130465E-17\n   335     7     2  -3.35335      -273.563      0.130703E-17\n   336     7     2  -3.36336      -273.569      0.130410E-17\n   337     7     2  -3.37337      -273.576      0.130386E-17\n   338     7     2  -3.38338      -273.582      0.130268E-17\n   339     7     2  -3.39339      -273.588      0.130264E-17\n   340     7     2  -3.40340      -273.595      0.130151E-17\n   341     7     2  -3.41341      -273.601      0.130286E-17\n   342     7     2  -3.42342      -273.607      0.130539E-17\n   343     7     2  -3.43343      -273.614      0.130031E-17\n   344     7     2  -3.44344      -273.620      0.130035E-17\n   345     7     2  -3.45345      -273.626      0.129923E-17\n   346     7     2  -3.46346      -273.632      0.129881E-17\n   347     7     2  -3.47347      -273.639      0.129813E-17\n   348     7     2  -3.48348      -273.645      0.129801E-17\n   349     7     2  -3.49349      -273.651      0.129883E-17\n   350     7     2  -3.50350      -273.658      0.129799E-17\n   351     7     2  -3.51351      -273.664      0.129584E-17\n   352     7     2  -3.52352      -273.670      0.129600E-17\n   353     7     2  -3.53353      -273.676      0.129516E-17\n   354     7     2  -3.54354      -273.683      0.129431E-17\n   355     7     2  -3.55355      -273.689      0.129527E-17\n   356     7     2  -3.56356      -273.695      0.129343E-17\n   357     7     2  -3.57357      -273.702      0.129285E-17\n   358     7     2  -3.58358      -273.708      0.129218E-17\n   359     7     2  -3.59359      -273.714      0.129302E-17\n   360     7     2  -3.60360      -273.720      0.129104E-17\n   361     7     2  -3.61361      -273.727      0.129167E-17\n   362     7     2  -3.62362      -273.733      0.129038E-17\n   363     7     2  -3.63363      -273.739      0.129183E-17\n   364     7     2  -3.64364      -273.746      0.128899E-17\n   365     7     2  -3.65365      -273.752      0.128867E-17\n   366     7     2  -3.66366      -273.758      0.128780E-17\n   367     7     2  -3.67367      -273.764      0.128715E-17\n   368     7     2  -3.68368      -273.771      0.128743E-17\n   369     7     2  -3.69369      -273.777      0.128636E-17\n   370     7     2  -3.70370      -273.783      0.128674E-17\n   371     7     2  -3.71371      -273.790      0.128593E-17\n   372     7     2  -3.72372      -273.796      0.128756E-17\n   373     7     2  -3.73373      -273.802      0.128389E-17\n   374     7     2  -3.74374      -273.808      0.128504E-17\n   375     7     2  -3.75375      -273.815      0.128406E-17\n   376     7     2  -3.76376      -273.821      0.128219E-17\n   377     7     2  -3.77377      -273.827      0.128153E-17\n   378     7     2  -3.78378      -273.834      0.128207E-17\n   379     7     2  -3.79379      -273.840      0.128372E-17\n   380     7     2  -3.80380      -273.846      0.127972E-17\n   381     7     2  -3.81381      -273.853      0.127931E-17\n   382     7     2  -3.82382      -273.859      0.127928E-17\n   383     7     2  -3.83383      -273.865      0.127938E-17\n   384     7     2  -3.84384      -273.872      0.127743E-17\n   385     7     2  -3.85385      -273.878      0.127713E-17\n   386     7     2  -3.86386      -273.884      0.127720E-17\n   387     7     2  -3.87387      -273.891      0.127561E-17\n   388     7     2  -3.88388      -273.897      0.127493E-17\n   389     7     2  -3.89389      -273.903      0.127438E-17\n   390     7     2  -3.90390      -273.910      0.127510E-17\n   391     7     2  -3.91391      -273.916      0.127470E-17\n   392     7     2  -3.92392      -273.922      0.127479E-17\n   393     7     2  -3.93393      -273.929      0.127212E-17\n   394     7     2  -3.94394      -273.935      0.127189E-17\n   395     7     2  -3.95395      -273.941      0.127069E-17\n   396     7     2  -3.96396      -273.948      0.126990E-17\n   397     7     2  -3.97397      -273.954      0.127333E-17\n   398     7     2  -3.98398      -273.961      0.126871E-17\n   399     7     2  -3.99399      -273.967      0.126913E-17\n   400     7     2  -4.00400      -273.973      0.126798E-17\n   401     7     2  -4.01401      -273.980      0.126739E-17\n   402     7     2  -4.02402      -273.986      0.126611E-17\n   403     7     2  -4.03403      -273.992      0.126600E-17\n   404     7     2  -4.04404      -273.999      0.126517E-17\n   405     7     2  -4.05405      -274.005      0.126456E-17\n   406     7     2  -4.06406      -274.012      0.126545E-17\n   407     7     2  -4.07407      -274.018      0.126301E-17\n   408     7     2  -4.08408      -274.025      0.126218E-17\n   409     7     2  -4.09409      -274.031      0.126344E-17\n   410     7     2  -4.10410      -274.037      0.126072E-17\n   411     7     2  -4.11411      -274.044      0.126020E-17\n   412     7     2  -4.12412      -274.050      0.125949E-17\n   413     7     2  -4.13413      -274.057      0.126112E-17\n   414     7     2  -4.14414      -274.063      0.125859E-17\n   415     7     2  -4.15415      -274.070      0.125783E-17\n   416     7     2  -4.16416      -274.076      0.125708E-17\n   417     7     2  -4.17417      -274.083      0.125804E-17\n   418     7     2  -4.18418      -274.089      0.125580E-17\n   419     7     2  -4.19419      -274.096      0.125475E-17\n   420     7     2  -4.20420      -274.102      0.125412E-17\n   421     7     2  -4.21421      -274.109      0.125294E-17\n   422     7     2  -4.22422      -274.115      0.125482E-17\n   423     7     2  -4.23423      -274.122      0.125156E-17\n   424     7     2  -4.24424      -274.128      0.125218E-17\n   425     7     2  -4.25425      -274.135      0.124978E-17\n   426     7     2  -4.26426      -274.141      0.124993E-17\n   427     7     2  -4.27427      -274.148      0.125114E-17\n   428     7     2  -4.28428      -274.154      0.124773E-17\n   429     7     2  -4.29429      -274.161      0.125025E-17\n   430     7     2  -4.30430      -274.168      0.124611E-17\n   431     7     2  -4.31431      -274.174      0.124530E-17\n   432     7     2  -4.32432      -274.181      0.124442E-17\n   433     7     2  -4.33433      -274.187      0.124357E-17\n   434     7     2  -4.34434      -274.194      0.124572E-17\n   435     7     2  -4.35435      -274.201      0.124203E-17\n   436     7     2  -4.36436      -274.207      0.124116E-17\n   437     7     2  -4.37437      -274.214      0.124125E-17\n   438     7     2  -4.38438      -274.221      0.123958E-17\n   439     7     2  -4.39439      -274.227      0.123885E-17\n   440     7     2  -4.40440      -274.234      0.123955E-17\n   441     7     2  -4.41441      -274.241      0.123690E-17\n   442     7     2  -4.42442      -274.247      0.123928E-17\n   443     7     2  -4.43443      -274.254      0.123528E-17\n   444     7     2  -4.44444      -274.261      0.123437E-17\n   445     7     2  -4.45445      -274.267      0.123352E-17\n   446     7     2  -4.46446      -274.274      0.123269E-17\n   447     7     2  -4.47447      -274.281      0.123174E-17\n   448     7     2  -4.48448      -274.288      0.123175E-17\n   449     7     2  -4.49449      -274.294      0.123024E-17\n   450     7     2  -4.50450      -274.301      0.122911E-17\n   451     7     2  -4.51451      -274.308      0.122924E-17\n   452     7     2  -4.52452      -274.315      0.122728E-17\n   453     7     2  -4.53453      -274.322      0.122710E-17\n   454     7     2  -4.54454      -274.328      0.122545E-17\n   455     7     2  -4.55455      -274.335      0.122448E-17\n   456     7     2  -4.56456      -274.342      0.122373E-17\n   457     7     2  -4.57457      -274.349      0.122248E-17\n   458     7     2  -4.58458      -274.356      0.122161E-17\n   459     7     2  -4.59459      -274.363      0.122140E-17\n   460     7     2  -4.60460      -274.370      0.121964E-17\n   461     7     2  -4.61461      -274.377      0.121887E-17\n   462     7     2  -4.62462      -274.383      0.121764E-17\n   463     7     2  -4.63463      -274.390      0.122126E-17\n   464     7     2  -4.64464      -274.397      0.121694E-17\n   465     7     2  -4.65465      -274.404      0.121665E-17\n   466     7     2  -4.66466      -274.411      0.121477E-17\n   467     7     2  -4.67467      -274.418      0.121468E-17\n   468     7     2  -4.68468      -274.425      0.121299E-17\n   469     7     2  -4.69469      -274.432      0.121387E-17\n   470     7     2  -4.70470      -274.439      0.120983E-17\n   471     7     2  -4.71471      -274.446      0.120907E-17\n   472     7     2  -4.72472      -274.453      0.120759E-17\n   473     7     2  -4.73473      -274.460      0.120694E-17\n   474     7     2  -4.74474      -274.467      0.120542E-17\n   475     7     2  -4.75475      -274.474      0.120486E-17\n   476     7     2  -4.76476      -274.481      0.120493E-17\n   477     7     2  -4.77477      -274.488      0.120434E-17\n   478     7     2  -4.78478      -274.495      0.120124E-17\n   479     7     2  -4.79479      -274.502      0.120046E-17\n   480     7     2  -4.80480      -274.509      0.119914E-17\n   481     7     2  -4.81481      -274.516      0.119810E-17\n   482     7     2  -4.82482      -274.523      0.119885E-17\n   483     7     2  -4.83483      -274.530      0.119587E-17\n   484     7     2  -4.84484      -274.537      0.119930E-17\n   485     7     2  -4.85485      -274.544      0.119392E-17\n   486     7     2  -4.86486      -274.551      0.119227E-17\n   487     7     2  -4.87487      -274.558      0.119404E-17\n   488     7     2  -4.88488      -274.565      0.119071E-17\n   489     7     2  -4.89489      -274.572      0.118996E-17\n   490     7     2  -4.90490      -274.579      0.118957E-17\n   491     7     2  -4.91491      -274.586      0.118968E-17\n   492     7     2  -4.92492      -274.593      0.118607E-17\n   493     7     2  -4.93493      -274.600      0.118467E-17\n   494     7     2  -4.94494      -274.607      0.118480E-17\n   495     7     2  -4.95495      -274.614      0.118270E-17\n   496     7     2  -4.96496      -274.621      0.118350E-17\n   497     7     2  -4.97497      -274.627      0.118047E-17\n   498     7     2  -4.98498      -274.634      0.117960E-17\n   499     7     2  -4.99499      -274.641      0.117838E-17\n   500     7     2  -5.00501      -274.648      0.117751E-17\n   501     7     2  -5.01502      -274.654      0.117658E-17\n   502     7     2  -5.02503      -274.661      0.117532E-17\n   503     7     2  -5.03504      -274.668      0.117463E-17\n   504     7     2  -5.04505      -274.674      0.117823E-17\n   505     7     2  -5.05506      -274.681      0.117229E-17\n   506     7     2  -5.06507      -274.687      0.117227E-17\n   507     7     2  -5.07508      -274.694      0.117160E-17\n   508     7     2  -5.08509      -274.700      0.116940E-17\n   509     7     2  -5.09510      -274.706      0.116851E-17\n   510     7     2  -5.10511      -274.713      0.116771E-17\n   511     7     2  -5.11512      -274.719      0.116664E-17\n   512     7     2  -5.12513      -274.725      0.116675E-17\n   513     7     2  -5.13514      -274.731      0.116805E-17\n   514     7     2  -5.14515      -274.737      0.116435E-17\n   515     7     2  -5.15516      -274.744      0.116461E-17\n   516     7     2  -5.16517      -274.750      0.116347E-17\n   517     7     2  -5.17518      -274.756      0.116289E-17\n   518     7     2  -5.18519      -274.762      0.116090E-17\n   519     7     2  -5.19520      -274.767      0.116061E-17\n   520     7     2  -5.20521      -274.773      0.115893E-17\n   521     7     2  -5.21522      -274.779      0.115833E-17\n   522     7     2  -5.22523      -274.785      0.115798E-17\n   523     7     2  -5.23524      -274.791      0.115713E-17\n   524     7     2  -5.24525      -274.796      0.115664E-17\n   525     7     2  -5.25526      -274.802      0.115517E-17\n   526     7     2  -5.26527      -274.808      0.115606E-17\n   527     7     2  -5.27528      -274.813      0.115690E-17\n   528     7     2  -5.28529      -274.819      0.115489E-17\n   529     7     2  -5.29530      -274.825      0.115420E-17\n   530     7     2  -5.30531      -274.830      0.115191E-17\n   531     7     2  -5.31532      -274.836      0.115390E-17\n   532     7     2  -5.32533      -274.841      0.115168E-17\n   533     7     2  -5.33534      -274.846      0.115038E-17\n   534     7     2  -5.34535      -274.852      0.114898E-17\n   535     7     2  -5.35536      -274.857      0.114972E-17\n   536     7     2  -5.36537      -274.863      0.114770E-17\n   537     7     2  -5.37538      -274.868      0.114839E-17\n   538     7     2  -5.38539      -274.873      0.114690E-17\n   539     7     2  -5.39540      -274.878      0.114912E-17\n   540     7     2  -5.40541      -274.884      0.115030E-17\n   541     7     2  -5.41542      -274.889      0.114501E-17\n   542     7     2  -5.42543      -274.894      0.114526E-17\n   543     7     2  -5.43544      -274.899      0.114914E-17\n   544     7     2  -5.44545      -274.904      0.114319E-17\n   545     7     2  -5.45546      -274.909      0.114231E-17\n   546     7     2  -5.46547      -274.914      0.114737E-17\n   547     7     2  -5.47548      -274.920      0.114199E-17\n   548     7     2  -5.48549      -274.925      0.114103E-17\n   549     7     2  -5.49550      -274.930      0.113993E-17\n   550     7     2  -5.50551      -274.935      0.114016E-17\n   551     7     2  -5.51552      -274.940      0.114421E-17\n   552     7     2  -5.52553      -274.945      0.113946E-17\n   553     7     2  -5.53554      -274.950      0.113802E-17\n   554     7     2  -5.54555      -274.955      0.113755E-17\n   555     7     2  -5.55556      -274.959      0.113716E-17\n   556     7     2  -5.56557      -274.964      0.113793E-17\n   557     7     2  -5.57558      -274.969      0.113569E-17\n   558     7     2  -5.58559      -274.974      0.113604E-17\n   559     7     2  -5.59560      -274.979      0.113665E-17\n   560     7     2  -5.60561      -274.984      0.113468E-17\n   561     7     2  -5.61562      -274.989      0.113438E-17\n   562     7     2  -5.62563      -274.994      0.113326E-17\n   563     7     2  -5.63564      -274.998      0.113299E-17\n   564     7     2  -5.64565      -275.003      0.113249E-17\n   565     7     2  -5.65566      -275.008      0.113310E-17\n   566     7     2  -5.66567      -275.013      0.113253E-17\n   567     7     2  -5.67568      -275.017      0.113186E-17\n   568     7     2  -5.68569      -275.022      0.113132E-17\n   569     7     2  -5.69570      -275.027      0.113244E-17\n   570     7     2  -5.70571      -275.032      0.112987E-17\n   571     7     2  -5.71572      -275.036      0.113018E-17\n   572     7     2  -5.72573      -275.041      0.113033E-17\n   573     7     2  -5.73574      -275.046      0.112782E-17\n   574     7     2  -5.74575      -275.051      0.112933E-17\n   575     7     2  -5.75576      -275.055      0.112748E-17\n   576     7     2  -5.76577      -275.060      0.112722E-17\n   577     7     2  -5.77578      -275.065      0.112745E-17\n   578     7     2  -5.78579      -275.069      0.112562E-17\n   579     7     2  -5.79580      -275.074      0.112562E-17\n   580     7     2  -5.80581      -275.079      0.112470E-17\n   581     7     2  -5.81582      -275.083      0.112443E-17\n   582     7     2  -5.82583      -275.088      0.112399E-17\n   583     7     2  -5.83584      -275.092      0.112352E-17\n   584     7     2  -5.84585      -275.097      0.112362E-17\n   585     7     2  -5.85586      -275.102      0.112243E-17\n   586     7     2  -5.86587      -275.106      0.112318E-17\n   587     7     2  -5.87588      -275.111      0.112246E-17\n   588     7     2  -5.88589      -275.115      0.112202E-17\n   589     7     2  -5.89590      -275.120      0.112192E-17\n   590    Solving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving QE of the solar cell...\nSolving quantum efficiency...\n 7     2  -5.90591      -275.125      0.112170E-17\n   591     7     2  -5.91592      -275.129      0.112111E-17\n   592     7     2  -5.92593      -275.134      0.112047E-17\n   593     7     2  -5.93594      -275.138      0.111917E-17\n   594     7     2  -5.94595      -275.143      0.112062E-17\n   595     7     2  -5.95596      -275.147      0.111827E-17\n   596     7     2  -5.96597      -275.152      0.111817E-17\n   597     7     2  -5.97598      -275.156      0.111731E-17\n   598     7     2  -5.98599      -275.161      0.111709E-17\n   599     7     2  -5.99600      -275.165      0.111665E-17\n Elapsed time =    19.0136909     s\n  \nSolving equilibrium...\nProcessing structure...\n...done!\n\n...done!\n CREATE MESH...\n Masternodes at (nm):\n       0.0\n     149.9\n     150.0\n    2999.9\n    3000.0\n    3200.0\n  \n Initial number of nodes (M+1):          299\n Refining mesh... \n ... Finished!\n Mesh with          105  nodes.\n ----------------------------------\n  \n Starting EQUILIBRIUM... \n Remeshing...  M+1 =          135  nodes.\n EQUILIBRIUM Output Code: Reached Absolute Tolerance.                       \n     Res:    5.55010459E-29\n Elapsed time =    5.03429994E-02 s\n  \n\n\n\n  \n Starting LIGHTSC... \n...done!\n      step  Jtot (A/m^2)          Res          Res-h    Res Poisson     Res-e        Info\n         1   -0.2703E-18    0.3289E-19    0.9817E-22    0.6197E-28    0.3289E-19         2\n         2   -0.2703E-17    0.9766E-19    0.1149E-21    0.3541E-26    0.9766E-19         2\n         3   -0.2703E-16    0.2674E-19    0.1225E-20    0.3542E-24    0.2671E-19         2\n         4   -0.2703E-15    0.9640E-19    0.8997E-19    0.3547E-22    0.3463E-19         2\n         5   -0.2702E-14    0.9365E-17    0.9103E-17    0.3595E-20    0.2200E-17         2\n         6   -0.2703E-13    0.6059E-18    0.6032E-18    0.1519E-21    0.5643E-19         2\n         7   -0.2703E-12    0.1498E-16    0.1498E-16    0.2272E-20    0.2843E-18         2\n         8   -0.2703E-11    0.1607E-17    0.1582E-17    0.2959E-21    0.2819E-18         2\n         9   -0.2703E-10    0.1795E-17    0.1570E-17    0.3950E-21    0.8712E-18         2\n        10   -0.2703E-09    0.3941E-19    0.1360E-19    0.1123E-25    0.3699E-19         2\n\n...done!\n        11   -0.2703E-08    0.2068E-18    0.1456E-18    0.1315E-24    0.1469E-18         2\n        12   -0.2703E-07    0.2071E-17    0.1466E-17    0.1336E-23    0.1463E-17         2\n        13   -0.2703E-06    0.2073E-16    0.1467E-16    0.1338E-22    0.1464E-16         2\n        14   -0.2703E-05    0.9740E-19    0.5797E-19    0.4274E-28    0.7828E-19         2\n        15   -0.2703E-04    0.8229E-18    0.5797E-18    0.1930E-27    0.5841E-18         2\n        16   -0.2703E-03    0.8193E-17    0.5797E-17    0.1706E-26    0.5790E-17         2\n        17   -0.2703E-02    0.4485E-19    0.1383E-19    0.3302E-28    0.4266E-19         2\n        18   -0.2703E-01    0.2027E-18    0.1383E-18    0.7052E-28    0.1482E-18         2\n        19   -0.2703        0.1955E-17    0.1383E-17    0.2986E-28    0.1381E-17         2\n        20    -2.703        0.1955E-16    0.1383E-16    0.4849E-28    0.1382E-16         2\n        21    -27.03        0.9171E-19    0.2627E-19    0.3431E-28    0.8787E-19         2\n\n        22    -270.3        0.3768E-18    0.2622E-18    0.2825E-28    0.2707E-18         2\n LIGHTSC Output Code: Reached Absolute Tolerance.                       \n     Res:    3.76834174E-19\n     J:   -270.300262      A/m2\n     V:    1.38166822E-09  V\n Elapsed time =   0.924980998     s\n  \n  \n Starting RunIQE... \n WLindex  nit   info    Wavelength (nm)    IQE (%)       Res\n     0     2     2   300.000       7.22283      0.696564E-19\n     1     2     2   303.266       7.37840      0.350430E-19\n     2     2     2   306.533       7.50739      0.305888E-19\n     3     2     2   309.799       7.61872      0.439507E-19\n     4     2     2   313.065       7.71949      0.233001E-19\n     5     2     2   316.332       7.82078      0.977377E-19\n     6     2     2   319.598       7.93951      0.263830E-19\n     7     2     2   322.864       8.10943      0.639599E-19\n     8     2     2   326.131       8.37943      0.293763E-19\n     9     2     2   329.397       8.78835      0.233351E-19\n    10     2     2   332.663       9.33494      0.519777E-19\n    11     2     2   335.930       10.0041      0.210139E-19\n    12     2     2   339.196       10.7482      0.538411E-19\n    13     2     2   342.462       11.6213      0.179197E-19\n    14     2     2   345.729       12.6882      0.166139E-19\n    15     2     2   348.995       14.0101      0.188921E-19\n    16     2     2   352.261       15.6569      0.238334E-19\n    17     2     2   355.528       17.4690      0.433499E-19\n    18     2     2   358.794       19.4494      0.366824E-19\n    19     2     2   362.060       21.4984      0.493684E-19\n    20     2     2   365.327       23.6379      0.273211E-19\n    21     2     2   368.593       25.7964      0.345053E-19\n    22     2     2   371.859       28.0235      0.263040E-19\n    23     2     2   375.126       30.2342      0.310130E-19\n    24     2     2   378.392       32.4938      0.533816E-19\n    25     2     2   381.658       34.7322      0.319046E-19\n    26     2     2   384.925       37.0077      0.353074E-19\n    27     2     2   388.191       39.3015      0.299469E-19\n    28     2     2   391.457       41.5656      0.513854E-19\n    29     2     2   394.724       43.7325      0.623458E-19\n    30     2     2   397.990       45.7152      0.342815E-19\n    31     2     2   401.256       47.4928      0.263018E-19\n    32     2     2   404.523       49.1681      0.715488E-19\n    33     2     2   407.789       50.7524      0.381917E-19\n    34     2     2   411.055       52.1496      0.264077E-19\n    35     2     2   414.322       53.5466      0.258143E-19\n    36     2     2   417.588       54.8354      0.727710E-19\n    37     2     2   420.854       55.9432      0.306008E-19\n    38     2     2   424.121       57.0429      0.358161E-19\n    39     2     2   427.387       58.0471      0.211315E-19\n    40     2     2   430.653       59.1219      0.308893E-19\n    41     2     2   433.920       60.1929      0.642774E-19\n    42     2     2   437.186       61.2014      0.230483E-18\n    43     2     2   440.452       62.3799      0.957656E-18\n    44     2     2   443.719       63.6358      0.311022E-17\n    45     2     2   446.985       64.7818      0.475693E-17\n    46     2     2   450.251       65.7290      0.987365E-17\n    47     2     2   453.518       66.8436      0.126814E-16\n    48     2     2   456.784       67.7937      0.183251E-16\n    49     2     2   460.050       68.7179      0.270483E-16\n    50     3     2   463.317       69.6761      0.278527E-19\n    51     3     2   466.583       70.6427      0.814546E-19\n    52     3     2   469.849       71.6837      0.687271E-19\n    53     3     2   473.116       72.8272      0.320016E-19\n    54     3     2   476.382       74.0768      0.436591E-19\n    55     3     2   479.648       75.3879      0.430381E-19\n    56     3     2   482.915       76.7758      0.409995E-19\n    57     3     2   486.181       78.2071      0.100932E-18\n    58     3     2   489.447       79.6602      0.862177E-19\n    59     3     2   492.714       80.8660      0.630486E-19\n    60     3     2   495.980       81.8501      0.725474E-19\n    61     3     2   499.246       82.6527      0.755532E-19\n    62     3     2   502.513       83.3176      0.804175E-19\n    63     3     2   505.779       83.8328      0.914977E-19\n    64     3     2   509.045       84.1954      0.971043E-19\n    65     3     2   512.312       84.5842      0.984610E-19\n    66     3     2   515.578       85.0073      0.134313E-18\n    67     3     2   518.844       85.4222      0.113080E-18\n    68     3     2   522.111       85.8256      0.114478E-18\n    69     3     2   525.377       86.1815      0.134255E-18\n    70     3     2   528.643       86.5273      0.137364E-18\n    71     3     2   531.910       86.8642      0.131752E-18\n    72     3     2   535.176       87.2449      0.143349E-18\n    73     3     2   538.442       87.6063      0.164233E-18\n    74     3     2   541.709       87.9384      0.170855E-18\n    75     3     2   544.975       88.2529      0.170392E-18\n    76     3     2   548.241       88.6152      0.188450E-18\n    77     3     2   551.508       88.9621      0.198100E-18\n    78     3     2   554.774       89.2647      0.198511E-18\n    79     3     2   558.040       89.5432      0.206252E-18\n    80     3     2   561.307       89.8156      0.225993E-18\n    81     3     2   564.573       90.0773      0.244858E-18\n    82     3     2   567.839       90.3190      0.223029E-18\n    83     3     2   571.106       90.5528      0.237285E-18\n    84     3     2   574.372       90.7789      0.267988E-18\n    85     3     2   577.638       90.9939      0.264107E-18\n    86     3     2   580.905       91.1918      0.262129E-18\n    87     3     2   584.171       91.3823      0.261041E-18\n    88     3     2   587.437       91.5660      0.274338E-18\n    89     3     2   590.704       91.7416      0.291409E-18\n    90     3     2   593.970       91.8977      0.269148E-18\n    91     3     2   597.236       92.0466      0.272854E-18\n    92     3     2   600.503       92.1884      0.289722E-18\n    93     3     2   603.769       92.3233      0.299428E-18\n    94     3     2   607.035       92.4476      0.297182E-18\n    95     3     2   610.302       92.5628      0.316471E-18\n    96     3     2   613.568       92.6707      0.319136E-18\n    97     3     2   616.834       92.7712      0.324432E-18\n    98     3     2   620.101       92.8647      0.336613E-18\n    99     3     2   623.367       92.9523      0.367040E-18\n   100     3     2   626.633       93.0327      0.380676E-18\n   101     3     2   629.900       93.1051      0.402461E-18\n   102     3     2   633.166       93.1693      0.410413E-18\n   103     3     2   636.432       93.2259      0.423730E-18\n   104     3     2   639.699       93.2759      0.428538E-18\n   105     3     2   642.965       93.3211      0.447725E-18\n   106     3     2   646.231       93.3577      0.459181E-18\n   107     3     2   649.498       93.3814      0.471814E-18\n   108     3     2   652.764       93.3927      0.478428E-18\n   109     3     2   656.030       93.3930      0.420820E-18\n   110     3     2   659.297       93.3913      0.435579E-18\n   111     3     2   662.563       93.3870      0.467204E-18\n   112     3     2   665.829       93.3787      0.476010E-18\n   113     3     2   669.095       93.3666      0.494844E-18\n   114     3     2   672.362       93.3504      0.508008E-18\n   115     3     2   675.628       93.3252      0.515738E-18\n   116     3     2   678.894       93.2825      0.518998E-18\n   117     3     2   682.161       93.2184      0.518893E-18\n   118     3     2   685.427       93.1408      0.537566E-18\n   119     3     2   688.693       93.0657      0.552022E-18\n   120     3     2   691.960       92.9982      0.720775E-18\n   121     3     2   695.226       92.9383      0.765671E-18\n   122     3     2   698.492       92.8689      0.798571E-18\n   123     3     2   701.759       92.7707      0.821999E-18\n   124     3     2   705.025       92.6377      0.845621E-18\n   125     3     2   708.291       92.4826      0.857521E-18\n   126     3     2   711.558       92.3384      0.809443E-18\n   127     3     2   714.824       92.2201      0.833378E-18\n   128     3     2   718.090       92.1168      0.869571E-18\n   129     3     2   721.357       91.9841      0.902500E-18\n   130     3     2   724.623       91.7743      0.931048E-18\n   131     3     2   727.889       91.4949      0.958806E-18\n   132     3     2   731.156       91.2640      0.815319E-18\n   133     3     2   734.422       91.1917      0.723769E-18\n   134     3     2   737.688       91.2599      0.776982E-18\n   135     3     2   740.955       91.3233      0.789582E-18\n   136     3     2   744.221       91.1829      0.743601E-18\n   137     3     2   747.487       90.7679      0.668189E-18\n   138     3     2   750.754       90.2471      0.643558E-18\n   139     3     2   754.020       89.9598      0.558811E-18\n   140     3     2   757.286       90.0565      0.643922E-18\n   141     3     2   760.553       90.3935      0.723051E-18\n   142     3     2   763.819       90.6011      0.673431E-18\n   143     3     2   767.085       90.3475      0.494772E-18\n   144     3     2   770.352       89.6209      0.325737E-18\n   145     3     2   773.618       88.7678      0.286613E-18\n   146     3     2   776.884       88.2984      0.197793E-18\n   147     3     2   780.151       88.3745      0.243865E-18\n   148     3     2   783.417       88.7711      0.339140E-18\n   149     3     2   786.683       89.0957      0.276408E-18\n   150     3     2   789.950       89.0169      0.111177E-18\n   151     3     2   793.216       88.4784      0.101153E-18\n   152     3     2   796.482       87.7035      0.178441E-18\n   153     3     2   799.749       87.0201      0.108063E-18\n   154     3     2   803.015       86.5602      0.347314E-18\n   155     3     2   806.281       86.4494      0.517998E-18\n   156     3     2   809.548       86.5470      0.571716E-18\n   157     3     2   812.814       86.6200      0.525765E-18\n   158     3     2   816.080       86.5117      0.425282E-18\n   159     3     2   819.347       86.2259      0.365403E-18\n   160     3     2   822.613       85.8736      0.404660E-18\n   161     3     2   825.879       85.5501      0.519197E-18\n   162     3     2   829.146       84.9171      0.161166E-17\n   163     3     2   832.412       84.1029      0.203150E-17\n   164     3     2   835.678       83.0204      0.203099E-17\n   165     3     2   838.945       81.6294      0.183260E-17\n   166     3     2   842.211       80.2812      0.166811E-17\n   167     3     2   845.477       79.6824      0.192487E-17\n   168     3     2   848.744       80.5249      0.286041E-17\n   169     3     2   852.010       83.0303      0.436030E-17\n   170     3     2   855.276       86.3695      0.572781E-17\n   171     3     2   858.543       87.7478      0.509895E-17\n   172     3     2   861.809       82.9509      0.157598E-17\n   173     3     2   865.075       71.7438      0.581683E-17\n   174     3     2   868.342       59.5499      0.849060E-17\n   175     3     2   871.608       51.1560      0.681519E-17\n   176     3     2   874.874       47.6040      0.339715E-17\n   177     3     2   878.141       47.8870      0.427088E-18\n   178     3     2   881.407       48.4678      0.327451E-18\n   179     3     2   884.673       34.0814      0.134475E-16\n   180     3     2   887.940       18.9013      0.139029E-16\n   181     3     2   891.206       10.5676      0.754547E-17\n   182     3     2   894.472       5.92827      0.422804E-17\n   183     3     2   897.739       3.91338      0.185490E-17\n   184     3     2   901.005       3.14767      0.724538E-18\n   185     3     2   904.271       3.10075      0.120197E-18\n   186     3     2   907.538       3.62024      0.417812E-18\n   187     3     2   910.804       4.20438      0.415518E-18\n   188     3     2   914.070       2.81557      0.138871E-17\n   189     3     2   917.337      0.483844      0.209511E-17\n   190     3     2   920.603     -0.253392E-11  0.422847E-18\n   191     1     2   923.869     -0.159613E-11  0.444460E-19\n   192     1     2   927.136     -0.159643E-11  0.444459E-19\n   193     1     2   930.402     -0.159643E-11  0.444459E-19\n   194     1     2   933.668     -0.159643E-11  0.444459E-19\n   195     1     2   936.935     -0.159643E-11  0.444459E-19\n   196     1     2   940.201     -0.159643E-11  0.444459E-19\n   197     1     2   943.467     -0.159643E-11  0.444459E-19\n   198     1     2   946.734     -0.159643E-11  0.444459E-19\n Elapsed time =    2.48232508     s\n  \n\n\nPLOT 2: IV curves for the DA and PDD models\n\nplt.figure()\nplt.plot(*solar_cell_da.iv[\"IV\"], label=\"Depletion approximation\")\nplt.plot(*solar_cell_pdd.iv[\"IV\"], '--', label=\"Poisson Drift Diffusion\")\nplt.xlim(0, 1.2)\nplt.ylim(0, 330)\nplt.legend()\nplt.xlabel(\"V (V)\")\nplt.ylabel(\"J (A/m$^2$)\")\nplt.title('(2) IV curves from depletion approximation and drift-diffusion models')\nplt.show()\n\n\n\n\nPLOT 3: EQE and absorption calculated for the PDD and DA models.\n\nplt.figure()\nplt.plot(wavelengths*1e9, 100*solar_cell_da[2].eqe(wavelengths), 'k-', label=\"EQE (DA)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_pdd[2].eqe(wavelengths), 'k--', label=\"EQE (PDD)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_da[2].layer_absorption, 'r-', label=\"A (DA)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_pdd[2].layer_absorption, 'b--', label=\"A (PDD)\")\nplt.legend()\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"EQE/A (%)\")\nplt.title('(3) EQE and absorption from depletion approximation and drift-diffusion models')\nplt.show()"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/1a-simple_cell.html",
    "href": "solar-cell-simulation/notebooks/1a-simple_cell.html",
    "title": "solcore-education",
    "section": "",
    "text": "In this first set of examples, we will look at simple planar solar cells (Si and GaAs).\nIn this script, we will look at the difference between Beer-Lambert absorption calculations, using the Fresnel equations for front-surface reflection, and using the transfer-matrix model.\nFirst, lets import some very commonly-used Python packages:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nNumpy is a Python library which adds supports for multi-dimensional data arrays and matrices, so it is very useful for storing and handling data. You will probably use it in every Solcore script you write. Here, it is imported under the alias ‘np’, which you will see used below. matplotlib is used for making plots, and is imported under the alias ‘plt’. Both the ‘np’ and ‘plt’ aliases are extremely commonly used in Python programming.\nNow, let’s import some things from Solcore (which will be explained as we use them):\n\nfrom solcore import material, si\nfrom solcore.solar_cell import SolarCell, Layer, Junction\nfrom solcore.solar_cell_solver import solar_cell_solver\nfrom solcore.interpolate import interp1d\n\n\n\nTo define our solar cell, we first want to define some materials. Then we want to organise those materials into Layers, organise those layers into a Junction, and then finally define a SolarCell with that Junction.\nFirst, let’s define a Si material. Silicon, along with many other semiconductors, dielectrics, and metals common in solar cells, is included in Solcore’s database:\n\nSi = material(\"Si\")\nGaAs = material(\"GaAs\")\n\nThis creates an instance of the Si and GaAs materials. However, to use this in a solar cell we need to do specify some more information, such as the doping level. The ‘si’ function comes in handy here to convert all quantities to based units e.g. m, m^(-3)…\n\nSi_n = Si(Nd=si(\"1e21cm-3\"), hole_diffusion_length=si(\"10um\"), relative_permittivity=11.7)\nSi_p = Si(Na=si(\"1e16cm-3\"), electron_diffusion_length=si(\"400um\"), relative_permittivity=11.7)\n\n\n\n\nNow we define the emitter and base layers we will have in the solar cell; we specify their thickness, the material they are made of and the role they play within the cell (emitter or base)\n\nemitter_layer = Layer(width=si(\"600nm\"), material=Si_n, role='emitter')\nbase_layer = Layer(width=si(\"200um\"), material=Si_p, role='base')\n\ncreate the p-n junction using the layers defined above. We set kind=“DA” to tell Solcore to use the Depletion Approximation in the calculation (we will discuss the different electrical solver options more later on):\n\nSi_junction = Junction([emitter_layer, base_layer], kind=\"DA\")\n\n\n\n\nWavelengths we want to use in the calculations; wavelengths between 300 and 1200 nm, at 200 evenly spaced intervals:\n\nwavelengths = si(np.linspace(300, 1200, 200), \"nm\")\n\nNote that here and above in defining the layers and materials we have used the “si()” function: you can use this to automatically convert quantities in other units to base SI units (e.g. nanometres to metres).\nNow we specify some options for running the calculation. Initially we want to use the Beer-Lambert absorption law to calculate the optics of the cell (“BL”). We set the wavelengths we want to use, and we set “recalculate_absorption” to True so that further down in the script when we try different optics methods, Solcore knows we want to re-calculate the optics of the cell. We specify the options in a Python format called a dictionary:\n\noptions = {\n    \"recalculate_absorption\": True,\n    \"optics_method\": \"BL\",\n    \"wavelength\": wavelengths\n           }\n\n\n\n\nDefine the solar cell; in this case it is very simple and we just have a single junction:\n\nsolar_cell = SolarCell([Si_junction])\n\nNow use solar_cell_solver to calculate the QE of the cell; we can ask solar_cell_solver to calculate ‘qe’, ‘optics’ or ‘iv’.\n\nsolar_cell_solver(solar_cell, 'qe', options)\n\nSolving optics of the solar cell...\nSolving QE of the solar cell...\n\n\nPLOT 1: plotting the QE in the Si junction, as well as the fraction of light absorbed in the junction and reflected:\n\nplt.figure()\nplt.plot(wavelengths*1e9, 100*solar_cell[0].eqe(wavelengths), 'k-', label=\"EQE\")\nplt.plot(wavelengths*1e9, 100*solar_cell[0].layer_absorption, label='Absorptance (A)')\nplt.plot(wavelengths*1e9, 100*solar_cell.reflected, label='Reflectance (R)')\nplt.legend()\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"QE/Absorptance (%)\")\nplt.title(\"(1) QE of Si cell - Beer-Lambert absorption\")\nplt.show()\n\n\n\n\n\n\n\nNow, to make this calculation a bit more realistic, there are a few things we could do. We could load some measured front surface reflectance from a file, or we could calculate the reflectance. To calculate the reflectance, there are many approaches we could take; we are going to explore two of them here.\nIf we assume the silicon is infinitely thick (or at least much thicker than the wavelengths we care about) then the reflectance will approach the reflectivity of a simple air/Si interface. We can calculate what this is using the Fresnel equation for reflectivity: https://en.wikipedia.org/wiki/Fresnel_equations\n\ndef calculate_R_Fresnel(incidence_n, transmission_n, wl):\n    # return a function that gives the value of R (at normal incidence) at the input wavelengths\n\n    Rs = np.abs((incidence_n - transmission_n)/(incidence_n + transmission_n))**2\n\n    return interp1d(wl, Rs)\n\ncomplex reflective index at our wavelengths for the transmission medium (Si). The incidence_n = 1 (air).\n\ntrns_n = Si_n.n(wavelengths) + 1j*Si_n.k(wavelengths)\nreflectivity_fn = calculate_R_Fresnel(1, trns_n, wavelengths)\n\nwe define the solar cell again, with the same layers but now supplying the function for the externally-calculated reflectivity, and calculate the optics (reflection, absorption, transmission):\n\nsolar_cell_fresnel = SolarCell([Si_junction], reflectivity=reflectivity_fn)\n\nsolar_cell_solver(solar_cell_fresnel, 'optics', options)\n\nSolving optics of the solar cell...\n\n\n\n\n\nFinally, we do the same again but now instead of supplying the external reflectivity we ask set the optics_method to “TMM” (Transfer Matrix Method), to correctly calculate reflection at the front surface:\n\nSi_junction = Junction([emitter_layer, base_layer], kind=\"DA\")\n\nsolar_cell_TMM = SolarCell([Si_junction])\n\nSet some more options:\n\noptions[\"optics_method\"] = \"TMM\"\nvoltages = np.linspace(0, 1.1, 100)\noptions[\"light_iv\"] = True\noptions[\"mpp\"] = True\noptions[\"voltages\"] = voltages\n\nwe calculate the QE and the IV (we set the light_iv option to True; if we don’t do this, Solcore just calculates the dark IV). We also ask Solcore to find the maximum power point (mpp) so we can get the efficiency.\n\nsolar_cell_solver(solar_cell_TMM, 'iv', options)\nsolar_cell_solver(solar_cell_TMM, 'qe', options)\n\nSolving optics of the solar cell...\nTreating layer(s) 1 incoherently\nCalculating RAT...\nCalculating absorption profile...\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nTreating layer(s) 1 incoherently\nCalculating RAT...\nCalculating absorption profile...\n\n\nSolving QE of the solar cell...\n\n\nPLOT 2: here we plot the reflection, transmission, and absorption calculated with the Fresnel equation defined above, and with the TMM solver in Solcore, showing that for this simple situation (no anti-reflection coating, thick Si junction) they are exactly equivalent.\n\nplt.figure()\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM.reflected, color='firebrick', label = \"R (TMM)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_fresnel.reflected, '--', color='orangered', label = \"R (Fresnel)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM.absorbed, color='dimgrey', label = \"A (TMM)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_fresnel.absorbed, '--', color='lightgrey', label = \"A (Fresnel)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM.transmitted, color='blue', label = \"T (TMM)\")\nplt.plot(wavelengths*1e9, 100*solar_cell_fresnel.transmitted, '--', color='dodgerblue', label = \"T (Fresnel)\")\nplt.ylim(0, 100)\nplt.legend()\nplt.title(\"(2) Optics of Si cell - Fresnel/TMM\")\nplt.show()\n\n\n\n\nPLOT 3: As above for the TMM calculation, plotting the EQE as well, which will be slightly lower than the absorption because not all the carriers are collected. Comparing to plot (1), we can see we now have lower absorption due to the inclusion of front surface reflection.\n\nplt.figure()\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM[0].eqe(wavelengths), 'k-', label=\"EQE\")\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM[0].layer_absorption, label='A')\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM.reflected, label=\"R\")\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM.transmitted, label=\"T\")\nplt.title(\"(3) QE of Si cell (no ARC) - TMM\")\nplt.legend()\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"QE/Absorptance (%)\")\nplt.ylim(0, 100)\nplt.show()\n\n\n\n\n\n\n\nNow we will try adding a simple anti-reflection coating (ARC), a single layer of silicon nitride (Si3N4):\n\nSiN = material(\"Si3N4\")()\n\nSi_junction = Junction([emitter_layer, base_layer], kind=\"DA\")\n\nsolar_cell_TMM_ARC = SolarCell([Layer(width=si(75, \"nm\"), material=SiN), Si_junction])\n\nsolar_cell_solver(solar_cell_TMM_ARC, 'qe', options)\nsolar_cell_solver(solar_cell_TMM_ARC, 'iv', options)\n\nSolving optics of the solar cell...\nTreating layer(s) 2 incoherently\nCalculating RAT...\nCalculating absorption profile...\nSolving QE of the solar cell...\n\n\nSolving optics of the solar cell...\nTreating layer(s) 2 incoherently\nCalculating RAT...\nCalculating absorption profile...\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\n\n\nPLOT 4: Absorption, EQE, reflection and transmission for the cell with a simple one-layer ARC. We see the reflection is significantly reduced from the previous plot leading to higher absorption/EQE.\n\nplt.figure()\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM_ARC[1].eqe(wavelengths), 'k-', label=\"EQE\")\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM_ARC[1].layer_absorption, label='A')\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM_ARC.reflected, label=\"R\")\nplt.plot(wavelengths*1e9, 100*solar_cell_TMM_ARC.transmitted, label=\"T\")\nplt.legend()\nplt.title(\"(4) QE of Si cell (ARC) - TMM\")\nplt.xlabel(\"Wavelength (nm)\")\nplt.ylabel(\"QE/Absorptance (%)\")\nplt.ylim(0, 100)\nplt.show()\n\n\n\n\nPLOT 5: Compare the IV curves of the cells with and without an ARC. The efficiency is also shown on the plot. Note that because we didn’t specify a light source, Solcore will assume we want to use AM1.5G; in later examples we will set the light source used for IV simulations explicitly.\n\nplt.figure()\nplt.plot(voltages, -solar_cell_TMM[0].iv(voltages)/10, label=\"No ARC\")\nplt.plot(voltages, -solar_cell_TMM_ARC[1].iv(voltages)/10, label=\"75 nm SiN\")\nplt.text(0.5, solar_cell_TMM.iv[\"Isc\"]/10, str(round(solar_cell_TMM.iv[\"Eta\"]*100, 1)) + ' %')\nplt.text(0.5, solar_cell_TMM_ARC.iv[\"Isc\"]/10, str(round(solar_cell_TMM_ARC.iv[\"Eta\"]*100, 1)) + ' %')\nplt.ylim(0, 38)\nplt.xlim(0, 0.8)\nplt.legend()\nplt.xlabel(\"V (V)\")\nplt.ylabel(r\"J (mA/cm$^2$)\")\nplt.title(\"(5) IV curve of Si cell with and without ARC\")\nplt.show()\n\n\n\n\n\n\n\nWe see that the cell with an ARC has a significantly higher Jsc, and a slightly higher Voc, than the bare Si cell. In reality, most Si cells have a textured surface rather than a planar surface with an ARC; this will be discussed later in the course.\nOverall, some things we can take away from the examples in this script: - The Beer-Lambert law is a very simple way to calculate absorption in a cell, but won’t take into account important effects such as front-surface reflection or the effects of anti-reflection coatings - Using the transfer-matrix method (TMM) we can account for front surface reflection and interference effects which make e.g. ARCs effective. In the simple situation of a thick cell without any front surface layers, it is equivalent to simply calculation the reflection with the Fresnel equations and assuming Beer-Lambert absorption in the cell. - Adding a simple, one-layer ARC can significantly reduce front-surface reflection for a single-junction cell, leading to improved short-circuit current."
  },
  {
    "objectID": "solar-cell-simulation/notebooks/2b-optical_constants.html",
    "href": "solar-cell-simulation/notebooks/2b-optical_constants.html",
    "title": "solcore-education",
    "section": "",
    "text": "We may want to model the optical constants of a material using analytic expressions, rather than just take data from a table; this can be useful when e.g. fitting ellipsometry data for a material with unknown optical constants, or if you do not have refractive index data for a material but have some information about where critical points in the band structure occur. In this example we will consider a simple model for a dielectric material, and a more complex model for GaAs, a semiconductor.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom solcore.absorption_calculator import search_db\nfrom solcore.absorption_calculator.cppm import Custom_CPPB\nfrom solcore.absorption_calculator.dielectric_constant_models import Oscillator\nfrom solcore.absorption_calculator.dielectric_constant_models import DielectricConstantModel, Cauchy\nfrom solcore.structure import Structure\nfrom solcore import material\n\nwl = np.linspace(300, 950, 200)*1e-9\n\nWe search the database for BK7 (borosilicate crown glass) and select the second entry, “Ohara” (index 1). We then select the first item in that list, which is the pageid of the entry - this is what we need to tell Solcore what item to access in the database.\n\npageid = search_db(\"BK7\")[1][0]\nBK7 = material(str(pageid), nk_db=True)()\n\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\n18 results found.\npageid  shelf   book    page    filepath    hasrefractive   hasextinction   rangeMin    rangeMax    points\n963 glass   BK7 SCHOTT  glass/schott/N-BK7.yml  1   1   0.3 2.5 25\n964 glass   BK7 OHARA   glass/ohara/S-BSL7.yml  1   1   0.29    2.4 31\n965 glass   BK7 HIKARI  glass/hikari/J-BK7A.yml 1   1   0.365015    2.05809 33\n966 glass   BK7 CDGM    glass/cdgm/H-K9L.yml    1   1   0.365   1.711   34\n967 glass   BK7 HOYA    glass/hoya/BSC7.yml 1   1   0.36501 1.01398 38\n968 glass   BK7 SUMITA  glass/sumita/K-BK7.yml  1   1   0.36    1.55    25\n969 glass   BK7 LZOS    glass/lzos/K8.yml   1   0   0.365   2.3254  31\n1090    glass   SCHOTT-BK   BK7G18  glass/schott/BK7G18.yml 1   1   0.38    2.5 18\n1091    glass   SCHOTT-BK   N-BK7   glass/schott/N-BK7.yml  1   1   0.3 2.5 25\n1092    glass   SCHOTT-BK   N-BK7HT glass/schott/N-BK7HT.yml    1   1   0.3 2.5 25\n1093    glass   SCHOTT-BK   N-BK7HTi    glass/schott/N-BK7HTi.yml   1   1   0.3 2.5 25\n1095    glass   SCHOTT-BK   P-BK7   glass/schott/P-BK7.yml  1   1   0.31    2.5 24\n1683    glass   HIKARI-BK   E-BK7   glass/hikari/E-BK7.yml  1   1   0.4 0.7 32\n1684    glass   HIKARI-BK   J-BK7   glass/hikari/J-BK7.yml  1   1   0.365015    2.05809 33\n1685    glass   HIKARI-BK   J-BK7A  glass/hikari/J-BK7A.yml 1   1   0.365015    2.05809 33\n2452    glass   SUMITA-BK   K-BK7   glass/sumita/K-BK7.yml  1   1   0.36    1.55    25\n2819    other   BK7_matching_liquid Cargille    index-matching liquids/cargille/BK7_matching_liquid.yml 1   0   0.31    1.55    200\n2904    3d  glass   BK7 glass/schott/N-BK7.yml  1   1   0.3 2.5 25\n\n\nNext, we define a Cauchy oscillator model. We put this into the DielectricConstantModel class; in theory, we could add as many oscillators as we want here.\nThe parameters for the Cauchy model for BK7 are from Wikipedia: https://en.wikipedia.org/wiki/Cauchy%27s_equation\n\ncauchy = Cauchy(An=1.5046, Bn=0.00420, Cn=0, Ak=0, Bk=0, Ck=0)\nmodel = DielectricConstantModel(e_inf=0, oscillators=[cauchy])\n\nCalculate the dielectric function which result from the Cauchy model, then get the \\(n\\) and \\(\\kappa\\) data from the database BK7 material for the complex refractive index:\n\neps = model.dielectric_constants(wl*1e9)\nnk = BK7.n(wl) + 1j*BK7.k(wl)\n\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial glass/ohara/S-BSL7.yml loaded.\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial glass/ohara/S-BSL7.yml loaded.\n\n\nCalculate the dielectric function by squaring the refractive index:\n\neps_db = nk**2\n\nPLOT 1: Plot the database values of e_1 (real part of the dielectric function) against the Cauchy model values:\n\nplt.figure()\nplt.plot(wl*1e9, np.real(eps), label='Cauchy model')\nplt.plot(wl*1e9, np.real(eps_db), '--', label='Database values')\nplt.legend()\nplt.ylabel(r'$\\epsilon_1$')\nplt.xlabel('Wavelength (nm)')\nplt.title(\"(1) Dielectric function for BK7 glass\")\nplt.show()\n\n\n\n\nHere, we have just looked at the real part of the dielectric function, but you can include absorption (non-zero e_2) in the dielectric constant models too.\nNow let’s look at a more complicated CPPB (Critical Point Parabolic Band) model for GaAs. First, read in experimental data for GaAs dielectric function (from Palik)…\n\nPalik_Eps1 = np.loadtxt(\"data/Palik_GaAs_Eps1.csv\", delimiter=',', unpack=False)\nPalik_Eps2 = np.loadtxt(\"data/Palik_GaAs_Eps2.csv\", delimiter=',', unpack=False)\n\nGenerate a list of energies over which to calculate the model dielectric function and create the CPPB_model Class object:\n\nE = np.linspace(0.2, 5, 1000)\nCPPB_Model = Custom_CPPB()\n\nThe Material_Params method loads in the desired material parameters as a dictionary (for some common materials):\n\nMatParams = CPPB_Model.Material_Params(\"GaAs\")\n\nParameters can be customised by assigning to the correct dictionary key:\n\nMatParams[\"B1\"] = 5.8\nMatParams[\"B1s\"] = 1.0\nMatParams[\"Gamma_Eg_ID\"] = 0.3\nMatParams[\"Alpha_Eg_ID\"] = 0.0\nMatParams[\"E1\"] = 2.8\nMatParams[\"E1_d1\"] = 2.9\nMatParams[\"Gamma_E1\"] = 0.1\nMatParams[\"E2\"] = 4.72\nMatParams[\"C\"] = 3.0\nMatParams[\"Alpha_E2\"] = 0.04\nMatParams[\"Gamma_E2\"] = 0.19\n\nMust define a structure object containing the required oscillator functions. The oscillator type and material parameters are both passed to individual ‘Oscillators’ in the structure:\n\nAdachi_GaAs = Structure([\n    Oscillator(oscillator_type=\"E0andE0_d0\", material_parameters=MatParams),\n    Oscillator(oscillator_type=\"E1andE1_d1\", material_parameters=MatParams),\n    Oscillator(oscillator_type=\"E_ID\", material_parameters=MatParams),\n    Oscillator(oscillator_type=\"E2\", material_parameters=MatParams)\n])\n\nOutput = CPPB_Model.eps_calc(Adachi_GaAs, E)\n\nPLOT 2: real and imaginary part of the dielectric constant, showing the individual contributions of the critical points.\n\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(9, 4.5))\n\n# Subplot I :: Real part of the dielectric function.\nax1.set_xlim(0, 5.3)\nax1.set_ylim(-14, 27)\n\nax1.plot(Palik_Eps1[:, 0], Palik_Eps1[:, 1], label=\"Exp. Data (Palik)\",\n         marker='o', ls='none', markerfacecolor='none', markeredgecolor=\"red\")\n\nax1.plot(E, Output[\"eps\"].real, color=\"navy\", label=\"Total\")\nax1.plot(E, Output[\"components\"][0].real, color=\"orangered\", ls='--', label=\"$E_0$ and $E_0+\\Delta_0$\")\nax1.plot(E, Output[\"components\"][1].real, color=\"dodgerblue\", ls='--', label=\"$E_1$ and $E_1+\\Delta_1$\")\nax1.plot(E, Output[\"components\"][2].real, color=\"limegreen\", ls='--', label=\"$E_{ID}$ (Indirect)\")\nax1.plot(E, Output[\"components\"][3].real, color=\"gold\", ls='--', label=\"$E_2$\")\n\nax1.set_xlabel(\"Energy (eV)\")\nax1.set_ylabel(\"$\\epsilon_1 (\\omega)$\")\nax1.set_title(\"(2) CPPB model for GaAs compared with experimental data\")\nax1.text(0.05, 0.05, '(a)', transform=ax1.transAxes, fontsize=12)\n\n# Subplot II :: Imaginary part of the dielectric function.\n\nax2.plot(Palik_Eps2[:, 0], Palik_Eps2[:, 1], label=\"Exp. Data (Palik)\",\n         marker='o', ls='none', markerfacecolor='none', markeredgecolor=\"red\")\n\nax2.plot(E, Output[\"eps\"].imag, color=\"Navy\", label=\"Total\")\nax2.plot(E, Output[\"components\"][0].imag, color=\"orangered\", ls='--', label=\"$E_0$ and $E_0+\\Delta_0$\")\nax2.plot(E, Output[\"components\"][1].imag, color=\"dodgerblue\", ls='--', label=\"$E_1$ and $E_1+\\Delta_1$\")\nax2.plot(E, Output[\"components\"][2].imag, color=\"limegreen\", ls='--', label=\"$E_{ID}$ (Indirect)\")\nax2.plot(E, Output[\"components\"][3].imag, color=\"gold\", ls='--', label=\"$E_2$\")\nax2.set_xlim(0, 5.3)\nax2.set_ylim(0, 27)\n\nax2.set_xlabel(\"Energy (eV)\")\nax2.set_ylabel(\"$\\epsilon_2 (\\omega)$\")\nax2.text(0.05, 0.05, '(b)', transform=ax2.transAxes, fontsize=12)\nax2.legend(loc=\"upper left\", frameon=False)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/4a-textured_Si_cell.html",
    "href": "solar-cell-simulation/notebooks/4a-textured_Si_cell.html",
    "title": "solcore-education",
    "section": "",
    "text": "# In this example, we will introduce RayFlare, which is a package which is closely interlinked with Solcore and extends\n# its optical capabilities. One of the features it has is a ray-tracer, which is useful when modelling e.g. Si solar\n# cells with textured surfaces. We will compare the result with PVLighthouse's wafer ray tracer.\n\n# For more information on how ray-tracing works, see RayFlare's documentation: https://rayflare.readthedocs.io/en/latest/Theory/theory.html\n\nimport numpy as np\nimport os\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom rayflare.ray_tracing import rt_structure\nfrom rayflare.textures import regular_pyramids, planar_surface\nfrom rayflare.options import default_options\nfrom rayflare.utilities import make_absorption_function\n\nfrom solcore.absorption_calculator import search_db\nfrom solcore import material, si\nfrom solcore.solar_cell import SolarCell, Layer, Junction\nfrom solcore.solar_cell_solver import solar_cell_solver\nfrom solcore.solar_cell_solver import default_options as defaults_solcore\n\nfile_path = os.path.dirname(os.path.abspath(__file__))\n\n# setting up some colours for plotting\npal = sns.color_palette(\"husl\", 4)\n\n# setting up Solcore materials. We use a specific set of Si optical constants from this paper:\n# https://doi.org/10.1016/j.solmat.2008.06.009\n# These are included in the refractiveindex.info database, so we take them from there.\n# This is the same data we used for the PVLighthouse calculation which we are going to compare to:\n# https://www2.pvlighthouse.com.au/calculators/wafer%20ray%20tracer/wafer%20ray%20tracer.html\n\nAir = material('Air')()\nSi_Green = search_db(\"Si/Green-2008\")[0][0]\nSi_RT = material(str(Si_Green), nk_db=True)()\n\n# If True, run the calculation; if False, load the result of the previous calculation. Will need to run at least once to\n# generate the results!\n\ncalc = True\n# We use this 'switch' to avoid re-running the whole ray-tracing calculation (which can be time-consuming) each time we\n# want to look at the results.\n\n# Setting options:\nwl = np.linspace(300, 1201, 50) * 1e-9\noptions = default_options()\noptions.wavelengths = wl\n\n# Number of point to scan across in the x & y directions in the unit cell. Decrease this to speed up the calculation\n# (but increase noise in results):\n\nnxy = 25\noptions.nx = nxy\noptions.ny = nxy\n\n# Number of rays to be traced at each wavelength:\noptions.n_rays = 4 * nxy ** 2\noptions.depth_spacing = si('50nm') # depth spacing for the absorption profile\noptions.parallel = True  # this is the default - if you do not want the code to run in parallel, change to False\n\n# Load the result of the PVLighthouse calculation for comparison:\nPVlighthouse = np.loadtxt(file_path + '/data/RAT_data_300um_2um_55.csv', delimiter=',', skiprows=1)\n\n# Define surface for the ray-tracing: a planar surface, and a surface with regular pyramids.\nflat_surf = planar_surface(size=2) # pyramid size in microns\ntriangle_surf = regular_pyramids(55, upright=False, size=2)\n\n# Set up the ray-tracing structure: this is a list of textures of length n, and then a list of materials of length n-1.\n# [so far a single layer, we define a front surface and a back surface (n = 2), and specify the material in between those\n# two surfaces (n-1 = 1)]. We also specify the width of each material, and the incidence medium (above the first interface)\n# and the transmission medium (below the last interface.\n\nrtstr = rt_structure(textures=[triangle_surf, flat_surf],\n                    materials = [Si_RT],\n                    widths=[si('300um')], incidence=Air, transmission=Air)\n\nif calc:\n    # This executes if calc = True (set at the top of the script): actually run the ray-tracing:\n    result = rtstr.calculate_profile(options)\n\n    # Put the results (Reflection, front surface reflection, transmission, absorption in the Si) in an array:\n    result_RAT = np.vstack((options['wavelengths']*1e9,\n                        result['R'], result['R0'], result['T'], result['A_per_layer'][:,0])).T\n\n    # absorption profile:\n    profile_rt = result['profile']\n\n    # save the results:\n    np.savetxt(file_path + '/results/rayflare_fullrt_300um_2umpyramids_300_1200nm.txt', result_RAT)\n    np.savetxt(file_path + '/results/rayflare_fullrt_300um_2umpyramids_300_1200nm_profile.txt', result['profile'])\n\nelse:\n    # If calc = False, load results from previous run.\n    result_RAT = np.loadtxt(file_path + '/results/rayflare_fullrt_300um_2umpyramids_300_1200nm.txt')\n    profile_rt = np.loadtxt(file_path + '/results/rayflare_fullrt_300um_2umpyramids_300_1200nm_profile.txt')\n\n# PLOT 1: results of ray-tracing from RayFlare and PVLighthouse, showing the reflection, absorption and transmission.\n\nplt.figure()\nplt.plot(result_RAT[:,0], result_RAT[:,1], '-o', color=pal[0], label=r'R$_{total}$', fillstyle='none')\nplt.plot(result_RAT[:,0], result_RAT[:,2], '-o', color=pal[1], label=r'R$_0$', fillstyle='none')\nplt.plot(result_RAT[:,0], result_RAT[:,3], '-o', color=pal[2], label=r'T', fillstyle='none')\nplt.plot(result_RAT[:,0], result_RAT[:,4], '-o', color=pal[3], label=r'A', fillstyle='none')\nplt.plot(PVlighthouse[:, 0], PVlighthouse[:, 2], '--', color=pal[0])\nplt.plot(PVlighthouse[:, 0], PVlighthouse[:, 9], '--', color=pal[2])\nplt.plot(PVlighthouse[:, 0], PVlighthouse[:, 3], '--', color=pal[1])\nplt.plot(PVlighthouse[:, 0], PVlighthouse[:, 5], '--', color=pal[3])\nplt.plot(-1, -1, '-ok', label='RayFlare')\nplt.plot(-1, -1, '--k', label='PVLighthouse')\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('R / A / T')\nplt.ylim(0, 1)\nplt.xlim(300, 1200)\nplt.legend()\nplt.title(\"(1) R/A/T for pyramid-textured Si, calculated with RayFlare and PVLighthouse\")\nplt.show()\n\n# Now, we have just done a purely optical calculation; however, if we want to use this information to do an EQE or IV\n# calculation, we can, by using the ability of Solcore to accept external optics data (we used this in example 1a already).\n# We need to create a function which gives the depth-dependent absorption profile. The argument of the function is the\n# position (in m) in the cell, which can be an array, and the function returns an array with the absorption at\n# these depths at every wavelength with dimensions (n_wavelengths, n_positions).\n#\n# RayFlare has the make_absorption_function to automatically make this function, as required by Solcore, from RayFlare's\n# output data.\n\n_, diff_absorb_fn = make_absorption_function(profile_rt, rtstr, options, matrix_method=False)\n\n# Now we feed this into Solcore; we will define a solar cell model using the depletion approximation (see example 1c).\n\nSi_base = material(\"Si\")\n\n# We need a p-n junction; we make sure the total width of the p-n junction is equal to the width of the Si used above\n# in the ray-tracing calculation (rtrst.widths[0]).\nn_material_Si_width = si(\"500nm\")\np_material_Si_width = rtstr.widths[0] - n_material_Si_width\n\nn_material_Si = Si_base(Nd=si(1e21, \"cm-3\"), hole_diffusion_length=si(\"10um\"),\n                electron_mobility=50e-4, relative_permittivity=11.68)\np_material_Si = Si_base(Na=si(1e16, \"cm-3\"), electron_diffusion_length=si(\"290um\"),\n                hole_mobility=400e-4, relative_permittivity=11.68)\n\n# Options for Solcore:\noptions_sc = defaults_solcore\noptions_sc.optics_method = \"external\"\noptions_sc.position = np.arange(0, rtstr.width, options.depth_spacing)\noptions_sc.light_iv = True\noptions_sc.wavelength = wl\noptions_sc.theta = options.theta_in*180/np.pi\nV = np.linspace(0, 1, 200)\noptions_sc.voltages = V\n\nsolar_cell = SolarCell(\n    [\n        Junction([Layer(width=n_material_Si_width, material=n_material_Si, role='emitter'),\n                  Layer(width=p_material_Si_width, material=p_material_Si, role='base')],\n                 sn=1, sp=1, kind='DA')\n    ],\n    external_reflected=result_RAT[:,1],\n    external_absorbed=diff_absorb_fn)\n\nsolar_cell_solver(solar_cell, 'qe', options_sc)\nsolar_cell_solver(solar_cell, 'iv', options_sc)\n\n# PLOT 2: EQE and absorption of Si cell with optics calculated through ray-tracing\nplt.figure()\nplt.plot(wl*1e9, solar_cell.absorbed, 'k-', label='Absorbed (integrated)')\nplt.plot(wl*1e9, solar_cell[0].eqe(wl), 'r-', label='EQE')\nplt.plot(wl*1e9, result_RAT[:,4], 'r--', label='Absorbed - RT')\nplt.ylim(0,1)\nplt.legend()\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('R/A')\nplt.title(\"(2) EQE/absorption from electrical model\")\nplt.show()\n\n# PLOT 3: Light IV of Si cell with optics calculated through ray-tracing\nplt.figure()\nplt.plot(V, -solar_cell[0].iv(V), 'r')\nplt.ylim(-20, 400)\nplt.xlim(0, 0.8)\nplt.legend()\nplt.ylabel('Current (A/m$^2$)')\nplt.xlabel('Voltage (V)') #The expected values of Isc and Voc are 372 A/m^2 and 0.63 V respectively\nplt.title(\"(3) IV characteristics\")\nplt.show()"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/5a-ultrathin_GaAs_cell.html",
    "href": "solar-cell-simulation/notebooks/5a-ultrathin_GaAs_cell.html",
    "title": "solcore-education",
    "section": "",
    "text": "# In previous examples, we have considered a few different methods used to improve absorption in solar cells:\n# anti-reflection coatings, to decrease front-surface reflection, metallic rear mirrors to reduce transmission and increase\n# the path length of light in the cell, and textured surfaces (with pyramids) which are used on Si cells to reduce\n# reflection and increase the path length of light in the cell. Another method which can be used for light-trapping is the\n# inclusion of periodic structures such as diffraction gratings or photonic crystals; here, we will consider an ultra-thin\n# (80 nm) GaAs cell with a diffraction grating.\n\n# This example is based on the simulations done relating to this work: https://doi.org/10.1002/pip.3463\n# This example requires that you have a working S4 installation: https://rayflare.readthedocs.io/en/latest/Installation/installation.html\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom solcore import si, material\nfrom solcore.structure import Layer\nfrom solcore.light_source import LightSource\nfrom solcore.solar_cell import SolarCell\nfrom solcore.constants import q\nfrom solcore.absorption_calculator import search_db\n\nfrom rayflare.rigorous_coupled_wave_analysis.rcwa import rcwa_structure\nfrom rayflare.transfer_matrix_method.tmm import tmm_structure\nfrom rayflare.options import default_options\n\n# Defining all the materials. We are just going to do an optical simulation, so don't have to worry about doping levels\n# and other parameters which would affect the electrical performance of the cell.\n\nInAlP = material('AlInP')(Al=0.5)\nGaAs = material('GaAs')()\nInGaP = material('GaInP')(In=0.5)\nSiN = material('Si3N4')()\nAl2O3 = material('Al2O3P')()\n\nAir = material('Air')()\n\n# The optical constants used for the silver are very important for the grating performance (see https://doi.org/10.1016/j.solmat.2018.11.008);\n# search for a known reliable dataset.\n\nAg_pageid = search_db(\"Ag/Jiang\")[0][0]\nAg = material(str(Ag_pageid), nk_db=True)()\n\nwavelengths = np.linspace(303, 1000, 200) * 1e-9\n\n# AM0 spectrum (photon flux) for calculating currents. For space applications (i.e. above the atmosphere) we are often\n# interested in AM0.\nAM0_ls = LightSource(source_type='standard', version='AM0', x=wavelengths, output_units=\"photon_flux_per_m\")\n\nAM0 = AM0_ls.spectrum(x=wavelengths)[1] # Photon flux; used to calculate photogenerated current later on\n\n# Setting options. We choose 's' polarization because, for normal incidence, there will not be a difference in the results\n# for s and p polarization (and thus for unpolarized light, 'u', which would be calculated as the average of the results for\n# s and p polarization. We could set the polarization to 'u' for equivalent results, but this would take longer because then\n# RayFlare has to run two calculations (for 's' and 'p' polarization) instead of one.\n# The other key option is the number of Fourier order: rigorous coupled-wave analysis (RCWA) is a Fourier-space method, and\n# we have to specify how many Fourier orders should be retained in the calculation. As we increase the number of orders, the\n# calculation should converge, but the computation time increases (it scales with the cube of the number of orders).\n\noptions = default_options()\noptions.pol = 's'\noptions.wavelengths = wavelengths\noptions.orders = 200 # Reduce the number of orders to speed up the calculation.\n\n# ================================================= #\nprint(\"Calculating on-substrate device...\")\n# on-substrate device (planar)\n\nstruct = SolarCell([Layer(si('20nm'), InAlP), Layer(si('85nm'), GaAs),\n                   Layer(si('20nm'), InGaP)])\n\n\n# make TMM structure for planar device\nTMM_setup = tmm_structure(struct, incidence=Air, transmission=GaAs)\n\n# calculate\nRAT_TMM_onsubs = TMM_setup.calculate(options)\n\nAbs_onsubs = RAT_TMM_onsubs['A_per_layer'][:,1]  # absorption in GaAs\n# indexing of A_per_layer is [wavelengths, layers]\n\nR_onsubs = RAT_TMM_onsubs['R']\nT_onsubs = RAT_TMM_onsubs['T']\n\n# ================================================= #\n# Device with planar silver\nprint(\"Calculating planar Ag mirror device...\")\n\nsolar_cell_TMM = SolarCell([Layer(material=InGaP, width=si('20nm')),\n                        Layer(material=GaAs, width=si('85nm')),\n                        Layer(material=InAlP, width=si('20nm'))],\n                           substrate=Ag)\n\nTMM_setup = tmm_structure(solar_cell_TMM, incidence=Air, transmission=Ag)\n\nRAT_TMM = TMM_setup.calculate(options)\n\nAbs_TMM = RAT_TMM['A_per_layer'][:, 1]\nAbs_TMM_InAlPonly = RAT_TMM['A_per_layer'][:, 2]\nAbs_TMM_InGaPonly = RAT_TMM['A_per_layer'][:, 0]\nR_TMM = RAT_TMM['R']\nT_TMM = RAT_TMM['T']\n\n# ================================================= #\n# Setting things up for RCWA calculation - DTL device\nprint(\"Calculating nanophotonic grating device...\")\n\nx = 600\n\n# lattice vectors for the grating. Units are in nm!\nsize = ((x, 0), (x / 2, np.sin(np.pi / 3) * x))\n\n# RCWA options for S4 (https://web.stanford.edu/group/fan/S4/python_api.html)\n\nropt = dict(LatticeTruncation='Circular',\n            DiscretizedEpsilon=False,\n            DiscretizationResolution=8,\n            PolarizationDecomposition=True,\n            PolarizationBasis='Default',\n            LanczosSmoothing=dict(Power=2, Width=1),\n            #LanczosSmoothing=False,\n            SubpixelSmoothing=False,\n            ConserveMemory=False,\n            WeismannFormulation=False,\n            Verbosity=0)\n\noptions.S4_options = ropt\n\n# grating layers\ngrating = [Layer(width=si(100, 'nm'), material=SiN, geometry=[{'type': 'circle', 'mat': Ag, 'center': (0, 0),\n                                                 'radius': x/3, 'angle': 0}])] # actual grating part of grating\n\n\n# DTL device without anti-reflection coating\nsolar_cell = SolarCell([Layer(material=InGaP, width=si('20nm')),\n                        Layer(material=GaAs, width=si('85nm')),\n                        Layer(material=InAlP, width=si('20nm'))] + grating,\n                       substrate=Ag)\n\n# make RCWA structure\nS4_setup = rcwa_structure(solar_cell, size, options, Air, Ag)\n\n# calculate\n\nRAT = S4_setup.calculate(options)\n\nAbs_DTL = RAT['A_per_layer'][:,1] # absorption in GaAs\n\nR_DTL = RAT['R']\nT_DTL = RAT['T']\n\n# ================================================= #\n# Setting things up for RCWA calculation - DTL device with ARC\nprint(\"Calculating nanophotonic grating device with ARC...\")\n\n# DTL device with anti-reflection coating\nsolar_cell = SolarCell([Layer(material=Al2O3, width=si('70nm')),\n                        Layer(material=InGaP, width=si('20nm')),\n                        Layer(material=GaAs, width=si('85nm')),\n                        Layer(material=InAlP, width=si('20nm'))] + grating,\n                       substrate=Ag)\n\n# make RCWA structure\nS4_setup = rcwa_structure(solar_cell, size, options, Air, Ag)\n\n# calculate\nRAT_ARC = S4_setup.calculate(options)\n\nAbs_DTL_ARC = RAT_ARC['A_per_layer'][:,2]     # absorption in GaAs + InGaP\n\nR_DTL_ARC = RAT_ARC['R']\nT_DTL_ARC = RAT_ARC['T']\n\n# ================================================= #\n# plotting\n\npal = sns.color_palette(\"husl\", 4)\n\n# assume 10% shading loss for the optical simulations when comparing with EQE\nfig = plt.figure(figsize=(6.4, 4.8))\n\nplt.plot(wavelengths*1e9, 100*Abs_onsubs, color=pal[0], label=\"On substrate\")\nplt.plot(wavelengths*1e9, 100*Abs_TMM, color=pal[1], label=\"Planar mirror\")\nplt.plot(wavelengths*1e9, 100*Abs_DTL, color=pal[2], label=\"Nanophotonic grating (no ARC)\")\nplt.plot(wavelengths*1e9, 100*Abs_DTL_ARC, color=pal[3], label=\"Nanophotonic grating (with ARC)\")\n\nplt.xlim(300, 950)\nplt.ylim(0, 100)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('EQE (%)')\nplt.legend(loc='upper left')\nplt.show()\n\nfig = plt.figure(figsize=(6.4, 4.8))\nplt.stackplot(wavelengths*1e9,\n              [100*Abs_TMM, 100*Abs_TMM_InGaPonly, 100*Abs_TMM_InAlPonly],\n              colors=pal,\n              labels=['Absorbed in GaAs', 'Absorbed in InGaP', 'Absorbed in InAlP'])\nplt.xlim(300, 950)\nplt.ylim(0, 90)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('EQE (%)')\nplt.legend(loc='upper right')\nplt.show()\n\n# Calculate photogenerated currents:\n\nonsubs = 0.1 * q * np.trapz(Abs_onsubs*AM0, wavelengths)\nAg = 0.1 * q * np.trapz(Abs_TMM*AM0, wavelengths)\nDTL = 0.1 * q * np.trapz(Abs_DTL*AM0, wavelengths)\nDTL_ARC = 0.1 * q * np.trapz(Abs_DTL_ARC*AM0, wavelengths)\n\n\nprint('On substrate device current: %.1f mA/cm2 ' % onsubs)\nprint('Planar Ag mirror device current: %.1f mA/cm2 ' % Ag)\nprint('Nanophotonic grating (no ARC) device current: %.1f mA/cm2 ' % DTL)\nprint('Nanophotonic grating (with ARC) device current: %.1f mA/cm2 ' % DTL_ARC)"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/6a-multiscale_models.html",
    "href": "solar-cell-simulation/notebooks/6a-multiscale_models.html",
    "title": "solcore-education",
    "section": "",
    "text": "# In example 4a, we looked at a solar cell made of a single layer of Si with pyramidal texturing. In reality, a\n# solar cell will have a more complicated structure with thin layers deposited on the front side to act as e.g. selective\n# transport layers for carriers. This adds a layer of complication to the ray-tracing process, because we can no longer\n# rely on the Fresnel equations to calculate the angle and wavelength-dependent reflection and transmission probabilities;\n# we might get absorption in the surface layers, and we need to take into account interference in the surface layers.\n# To do this, we can combine ray-tracing and the transfer-matrix method; we can calculate the reflection, absorption and\n# transmission probabilities using TMM, and use thosee probabilities in our ray-tracing calculations. In RayFlare, this\n# functionality is implemented as part of the angular redistribution matrix functionality.\n\nfrom solcore import material, si\nfrom solcore.light_source import LightSource\nfrom solcore.constants import q\nfrom solcore.solar_cell import SolarCell, Layer, Junction\nfrom solcore.solar_cell_solver import default_options as defaults_solcore, solar_cell_solver\n\nfrom rayflare.textures import regular_pyramids\nfrom rayflare.structure import Interface, BulkLayer, Structure\nfrom rayflare.matrix_formalism import calculate_RAT, process_structure\nfrom rayflare.options import default_options\nfrom rayflare.angles import make_angle_vector\nfrom rayflare.utilities import make_absorption_function\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.ndimage.filters import gaussian_filter1d\n\nfrom cycler import cycler\n\n\nimport os\n\n# New materials from data files - uncomment to add to database\n\nfrom solcore.material_system import create_new_material\ncur_path = os.path.dirname(os.path.abspath(__file__))\ncreate_new_material('aSi_i', os.path.join(cur_path, 'data/model_i_a_silicon_n.txt'), os.path.join(cur_path, 'data/model_i_a_silicon_k.txt'))\ncreate_new_material('ITO_measured', os.path.join(cur_path, 'data/front_ITO_n.txt'), os.path.join(cur_path, 'data/front_ITO_k.txt'))\n\n# Matrix multiplication\nwavelengths = np.linspace(300, 1200, 80)*1e-9\n\noptions = default_options()\noptions.wavelengths = wavelengths\noptions.project_name = 'HIT_example'\noptions.n_rays = 10000 # Reduce this (or the number of wavelengths) to speed up the example!\noptions.n_theta_bins = 20\noptions.nx = 5\noptions.ny = 5\noptions.I_thresh = 0.005\noptions.bulk_profile = True\n_, _, angle_vector = make_angle_vector(options['n_theta_bins'], options['phi_symmetry'],\n                                       options['c_azimuth'])\noptions.bulk_profile = True\n\nSi = material('Si')()\nAir = material('Air')()\nITO = material('ITO_measured')()\n\nAg = material('Ag')()\naSi = material('aSi_i')()\n\n# stack based on doi:10.1038/s41563-018-0115-4\nfront_materials = [Layer(80e-9, ITO), Layer(13e-9, aSi)]\nback_materials = [Layer(13e-9, aSi), Layer(240e-9, ITO)]\n\n# whether pyramids are upright or inverted is relative to front incidence.\n# so if the same etch is applied to both sides of a slab of silicon, one surface\n# will have 'upright' pyramids and the other side will have 'not upright' (inverted)\n# pyramids in the model\n\nsurf = regular_pyramids(elevation_angle=55, upright=True)\nsurf_back = regular_pyramids(elevation_angle=55, upright=False)\n\nfront_surf = Interface('RT_TMM', texture=surf, layers=front_materials, name='HIT_front', coherent=True)\nback_surf = Interface('RT_TMM', texture=surf_back, layers=back_materials, name='HIT_back', coherent=True)\n\n\nbulk_Si = BulkLayer(170e-6, Si, name='Si_bulk') # bulk thickness in m\n\nSC = Structure([front_surf, bulk_Si, back_surf], incidence=Air, transmission=Ag)\n\nprocess_structure(SC, options, save_location=\"current\")\n\nresults = calculate_RAT(SC, options, save_location=\"current\")\n\nRAT = results[0]\nresults_per_pass = results[1]\n\n\nR_per_pass = np.sum(results_per_pass['r'][0], 2)\nR_0 = R_per_pass[0]\nR_escape = np.sum(R_per_pass[1:, :], 0)\n\n# only select absorbing layers, sum over passes\nresults_per_layer_front = np.sum(results_per_pass['a'][0], 0)\n\nresults_per_layer_back = np.sum(results_per_pass['a'][1], 0)\n\n\nallres = np.hstack((RAT['T'].T, results_per_layer_back,\n                    RAT['A_bulk'].T, results_per_layer_front)).T\n\n# calculated photogenerated current (Jsc with 100% EQE)\n\nspectr_flux = LightSource(source_type='standard', version='AM1.5g', x=wavelengths,\n                           output_units='photon_flux_per_m', concentration=1).spectrum(wavelengths)[1]\n\nJph_Si = q * np.trapz(RAT['A_bulk'][0] * spectr_flux, wavelengths)/10 # mA/cm2\n\nprint(\"Photogenerated current in Si = %.1f mA/cm2\" % Jph_Si)\n\npal = sns.cubehelix_palette(allres.shape[0] + 1, start=.5, rot=-.9)\npal.reverse()\ncols = cycler('color', pal)\n\nparams = {'legend.fontsize': 'small',\n          'axes.labelsize': 'small',\n          'axes.titlesize': 'small',\n          'xtick.labelsize': 'small',\n          'ytick.labelsize': 'small',\n          'axes.prop_cycle': cols}\n\nplt.rcParams.update(params)\n\n\n\n# plot total R, A, T\nfig = plt.figure(figsize=(6,4))\nax = plt.subplot(111)\nax.plot(options['wavelengths']*1e9, R_escape + R_0, '--k', label=r'$R_{total}$')\nax.plot(options['wavelengths']*1e9, R_0, '-.k', label=r'$R_0$')\nax.stackplot(options['wavelengths']*1e9, allres,\n             labels=['Ag (transmitted)', 'Back ITO', 'a-Si (back)', 'Bulk Si',\n                     'a-Si (front)', 'Front ITO'\n                     ])\nax.set_xlabel(r'Wavelength ($\\mu$m)')\nax.set_ylabel('Absorption/Emissivity')\nax.set_xlim(min(options['wavelengths']*1e9), max(options['wavelengths']*1e9))\nax.set_ylim(0, 1)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()\n\n\nysmoothed = gaussian_filter1d(np.vstack((allres, RAT[\"R\"])), sigma=2, axis=1)\n\n# plot total R, A, T - smoothed\nfig = plt.figure(figsize=(6,4))\nax = plt.subplot(111)\nax.stackplot(options['wavelengths']*1e9, ysmoothed,\n             labels=['Ag (transmitted)', 'Back ITO', 'a-Si (back)', 'Bulk Si',\n                     'a-Si (front)', 'Front ITO', 'R'\n                     ])\nax.set_xlabel(r'Wavelength ($\\mu$m)')\nax.set_ylabel('Absorption/Emissivity')\nax.set_xlim(min(options['wavelengths']*1e9), max(options['wavelengths']*1e9))\nax.set_ylim(0, 1)\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()\n\nprofile_Si = results[3][0]\nexternal_R = RAT['R'][0, :]\n\npositions, absorb_fn = make_absorption_function([None, profile_Si, None], SC, options, True)\n\nSi_SC = material(\"Si\")\nGaAs_SC = material(\"GaAs\")\nT = 300\n\np_material_Si = Si_SC(T=T, Na=si(1e21, \"cm-3\"), electron_diffusion_length=si(\"10um\"),\n                hole_mobility=50e-4, relative_permittivity=11.68)\nn_material_Si = Si_SC(T=T, Nd=si(1e16, \"cm-3\"), hole_diffusion_length=si(\"290um\"),\n                electron_mobility=400e-4, relative_permittivity=11.68)\n\n\noptions_sc = defaults_solcore\noptions_sc.optics_method = \"external\"\noptions_sc.position = positions\noptions_sc.light_iv = True\noptions_sc.wavelength = wavelengths\noptions_sc.mpp = True\noptions_sc.theta = options.theta_in*180/np.pi\nV = np.linspace(0, 2.5, 250)\noptions_sc.voltages = V\n\nsolar_cell = SolarCell([Layer(80e-9, ITO),\n                   Layer(13e-9, aSi),\n                   Junction([Layer(500e-9, p_material_Si, role=\"emitter\"),\n                             Layer(bulk_Si.width-500e-9, n_material_Si, role=\"base\")], kind=\"DA\"),\n                   Layer(13e-9, aSi),\n                   Layer(240e-9, ITO)],\n                  external_reflected = external_R,\n                                       external_absorbed = absorb_fn)\n\n\n\nsolar_cell_solver(solar_cell, 'qe', options_sc)\nsolar_cell_solver(solar_cell, 'iv', options_sc)\n\nplt.figure()\nplt.plot(options['wavelengths']*1e9, RAT[\"A_bulk\"][0], 'r-')\nplt.plot(wavelengths*1e9, solar_cell.absorbed, 'k--', label='Absorbed (integrated)')\nplt.plot(wavelengths*1e9, solar_cell[2].eqe(wavelengths), 'b-', label='Si EQE')\nplt.ylim(0,1)\nplt.legend()\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('R/A')\nplt.show()\n\n\nplt.figure()\nplt.plot(V, solar_cell.iv['IV'][1], '-k')\nplt.ylim(-20, 370)\nplt.xlim(0, 0.85)\nplt.ylabel('Current (A/m$^2$)')\nplt.xlabel('Voltage (V)')\nplt.show()"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/6b-multiscale_models.html",
    "href": "solar-cell-simulation/notebooks/6b-multiscale_models.html",
    "title": "solcore-education",
    "section": "",
    "text": "# In example 6a, we looked at a [] using integrated ray-tracing and TMM to calculate the optical behaviour of each\n# surface, and using the angular redistribution matrix method to combine the surfaces and calculate overall reflection,\n# transmission, absorption per layer and absorption profiles. However, this method is not limited to treating surfaces\n# with ray-tracing; it is also possible to simply use the TMM (for planar layers), RCWA (for gratings/periodic structutes)\n# or ideal analytic cases (perfect mirrors and Lambertian reflectors are currently implemented).\n\nimport numpy as np\nimport os\n# solcore imports\nfrom solcore.structure import Layer\nfrom solcore import material\nfrom solcore import si\nfrom rayflare.structure import Interface, BulkLayer, Structure\nfrom rayflare.matrix_formalism import process_structure, calculate_RAT, get_savepath\nfrom rayflare.transfer_matrix_method import tmm_structure\nfrom rayflare.angles import theta_summary, make_angle_vector\nfrom rayflare.textures import regular_pyramids\nfrom rayflare.options import default_options\n\nimport matplotlib.pyplot as plt\nfrom sparse import load_npz\nimport seaborn as sns\nimport matplotlib as mpl\n\n# Needs to run only once per computer to add material to database:\n# from solcore.material_system import create_new_material\n# create_new_material('Si_OPTOS', 'data/Si_OPTOS_n.txt', 'data/Si_OPTOS_k.txt')\n\nangle_degrees_in = 8\n\nwavelengths = np.linspace(900, 1180, 30)*1e-9\n\nSi = material('Si')()\nAir = material('Air')()\n\noptions = default_options()\noptions.wavelengths = wavelengths\noptions.theta_in = angle_degrees_in*np.pi/180\noptions.n_theta_bins = 50\noptions.c_azimuth = 0.25\noptions.n_rays = 50000\noptions.project_name = 'compare_surfaces'\noptions.phi_symmetry = np.pi/2\noptions.I_thresh = 0.005\noptions.pol = 'u'\noptions.nx = 5\noptions.ny = 5\noptions.parallel = True\n\n# materials with constant n, zero k\nx = 1000\n\nd_vectors = ((x, 0),(0,x))\narea_fill_factor = 0.36\nhw = np.sqrt(area_fill_factor)*500\n\nfront_materials = []\nback_materials = [Layer(si('120nm'), Si, geometry=[{'type': 'rectangle', 'mat': Air, 'center': (x/2, x/2),\n                                                     'halfwidths': (hw, hw), 'angle': 45}])]\n\n# whether pyramids are upright or inverted is relative to front incidence.\n# so if the same etch is applied to both sides of a slab of silicon, one surface\n# will have 'upright' pyramids and the other side will have 'not upright' (inverted)\n# pyramids in the model\nsurf = regular_pyramids(elevation_angle=55, upright=False)\n\nfront_surf_pyramids = Interface('RT_Fresnel', texture=surf, layers=[],\n                                name = 'inv_pyramids_front_' + str(options['n_rays']))\nfront_surf_planar = Interface('TMM', layers=[], name='planar_front')\nback_surf_grating = Interface('RCWA', layers=back_materials, name='crossed_grating_back',\n                              d_vectors=d_vectors, rcwa_orders=15)\nback_surf_planar = Interface('TMM', layers=[], name = 'planar_back')\n\nbulk_Si = BulkLayer(201.8e-6, Si, name = 'Si_bulk') # bulk thickness in m\n\nSC_fig6 = Structure([front_surf_planar, bulk_Si, back_surf_grating], incidence=Air, transmission=Air)\n\nSC_fig7 = Structure([front_surf_pyramids, bulk_Si, back_surf_planar], incidence=Air, transmission=Air)\n\nSC_fig8 = Structure([front_surf_pyramids, bulk_Si, back_surf_grating], incidence=Air, transmission=Air)\n\nplanar = Structure([front_surf_planar, bulk_Si, back_surf_planar], incidence=Air, transmission=Air)\n\nprocess_structure(SC_fig6, options)\n\nprocess_structure(SC_fig7, options)\n\nprocess_structure(SC_fig8, options)\n\nresults_fig6= calculate_RAT(SC_fig6, options)\n\nresults_fig7 = calculate_RAT(SC_fig7, options)\n\nresults_fig8 = calculate_RAT(SC_fig8, options)\n\nresults_planar = calculate_RAT(planar, options)\n\nRAT_fig6 = results_fig6[0]\nRAT_fig7 = results_fig7[0]\nRAT_fig8 = results_fig8[0]\n\nRAT_planar = results_planar[0]\n\n# planar\n\nstruc = tmm_structure([Layer(si('200um'), Si)], Air, Air)\noptions.coherent = False\noptions.coherency_list = ['i']\nRAT = tmm_structure.calculate(struc, options)\n\npalhf = sns.color_palette(\"hls\", 4)\n\nfig = plt.figure()\nplt.plot(wavelengths*1e9, RAT_fig6['A_bulk'][0], '-o', color=palhf[0], label='Rear grating', fillstyle='none')\nplt.plot(wavelengths*1e9, RAT_fig7['A_bulk'][0], '-o', color=palhf[1],  label= 'Front pyramids', fillstyle='none')\nplt.plot(wavelengths*1e9, RAT_fig8['A_bulk'][0], '-o', color=palhf[2],  label= 'Grating + pyramids', fillstyle='none')\nplt.plot(wavelengths*1e9, RAT['A_per_layer'][:,0], '-k', label='Planar')\nplt.plot(wavelengths*1e9, RAT_planar['A_bulk'][0], '--r')\nplt.legend(loc='lower left')\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Absorption in Si')\nplt.xlim([900, 1200])\nplt.ylim([0, 1])\nplt.show()\n\n\ntheta_intv, phi_intv, angle_vector = make_angle_vector(options['n_theta_bins'], options['phi_symmetry'],\n                                       options['c_azimuth'])\n\n\npath = get_savepath('default', options.project_name)\nsprs = load_npz(os.path.join(path, SC_fig8[2].name + 'frontRT.npz'))\n\nwl_to_plot = 1100e-9\n\nwl_index = np.argmin(np.abs(wavelengths-wl_to_plot))\n\nfull = sprs[wl_index].todense()\n\nsummat = theta_summary(full, angle_vector, options['n_theta_bins'], 'front')\n\nsummat_r = summat[:options['n_theta_bins'], :]\n\nsummat_r = summat_r.rename({r'$\\theta_{in}$': r'$\\sin(\\theta_{in})$', r'$\\theta_{out}$': r'$\\sin(\\theta_{out})$'})\n\nsummat_r = summat_r.assign_coords({r'$\\sin(\\theta_{in})$': np.sin(summat_r.coords[r'$\\sin(\\theta_{in})$']).data,\n                                    r'$\\sin(\\theta_{out})$': np.sin(summat_r.coords[r'$\\sin(\\theta_{out})$']).data})\n\n\npalhf = sns.cubehelix_palette(256, start=.5, rot=-.9)\npalhf.reverse()\nseamap = mpl.colors.ListedColormap(palhf)\n\nfig = plt.figure()\nax = plt.subplot(111)\nax = summat_r.plot.imshow(ax=ax, cmap=seamap, vmax=0.3)\nplt.show()\n\n\nsprs = load_npz(os.path.join(path, SC_fig8[0].name + 'backRT.npz'))\n\nwl_to_plot = 1100e-9\n\nwl_index = np.argmin(np.abs(wavelengths-wl_to_plot))\n\nfull = sprs[wl_index].todense()\n\nsprs = load_npz(os.path.join(path, SC_fig8[0].name + 'rearRT.npz'))\n\nwl_to_plot = 1100e-9\n\nwl_index = np.argmin(np.abs(wavelengths-wl_to_plot))\n\nfull = sprs[wl_index].todense()\n\nsummat = theta_summary(full, angle_vector, options['n_theta_bins'], 'rear')\n\nsummat_r = summat[:options['n_theta_bins'], :]\n\nsummat_r = summat_r.rename({r'$\\theta_{in}$': r'$\\sin(\\theta_{in})$', r'$\\theta_{out}$': r'$\\sin(\\theta_{out})$'})\n\nsummat_r = summat_r.assign_coords({r'$\\sin(\\theta_{in})$': np.sin(summat_r.coords[r'$\\sin(\\theta_{in})$']).data,\n                                    r'$\\sin(\\theta_{out})$': np.sin(summat_r.coords[r'$\\sin(\\theta_{out})$']).data})\n\n\npalhf = sns.cubehelix_palette(256, start=.5, rot=-.9)\npalhf.reverse()\nseamap = mpl.colors.ListedColormap(palhf)\n\nfig = plt.figure()\nax = plt.subplot(111)\nax = summat_r.plot.imshow(ax=ax, cmap=seamap)\nplt.show()\n\nsummat = theta_summary(full, angle_vector, options['n_theta_bins'], 'rear')\n\nsummat_r = summat[options['n_theta_bins']:, :]\n\nsummat_r = summat_r.rename({r'$\\theta_{in}$': r'$\\sin(\\theta_{in})$', r'$\\theta_{out}$': r'$\\sin(\\theta_{out})$'})\n\nsummat_r = summat_r.assign_coords({r'$\\sin(\\theta_{in})$': np.sin(summat_r.coords[r'$\\sin(\\theta_{in})$']).data,\n                                    r'$\\sin(\\theta_{out})$': np.sin(summat_r.coords[r'$\\sin(\\theta_{out})$']).data})\n\n\npalhf = sns.cubehelix_palette(256, start=.5, rot=-.9)\npalhf.reverse()\nseamap = mpl.colors.ListedColormap(palhf)\n\nfig = plt.figure()\nax = plt.subplot(111)\nax = summat_r.plot.imshow(ax=ax, cmap=seamap)\nplt.show()"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/7a-optimization.html",
    "href": "solar-cell-simulation/notebooks/7a-optimization.html",
    "title": "solcore-education",
    "section": "",
    "text": "# In a few of the previous examples, we have used anti-reflection coatings. In example 5a, we introduced a nanophotonic\n# grating for light trapping. But how do you find out the right thickness for the anti-reflection coating layer(s),\n# or the right dimensions for a light-trapping grating? This is where optimization comes in. Here, we will look at a very\n# simple 'brute-force' optimization for a single or double-layer ARC in example 7a, and a more complicated framework for\n# running optimizations using Solcore/RayFlare and a differential evolution algorithm in example 7b.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom solcore import material, si\nfrom solcore.solar_cell import Layer\nfrom solcore.light_source import LightSource\nfrom solcore.absorption_calculator import search_db\n\nfrom rayflare.transfer_matrix_method import tmm_structure\nfrom rayflare.options import default_options\nimport seaborn as sns\n\nopts = default_options()\n\nwavelengths = np.linspace(300, 1200, 800)*1e-9\n\nAM15g = LightSource(source_type=\"standard\", version=\"AM1.5g\", output_units=\"photon_flux_per_m\")\nspectrum = AM15g.spectrum(wavelengths)[1]\nnormalised_spectrum = spectrum/np.max(spectrum)\n\nopts.wavelengths = wavelengths\nopts.coherent = False\nopts.coherency_list = ['c', 'i']\n\nSi = material(\"Si\")()\nSiN = material(\"Si3N4\")()\nAg = material(\"Ag\")()\nAir = material(\"Air\")()\n\nd_range = np.linspace(0, 200, 200)\n\nmean_R = np.empty_like(d_range)\nweighted_R = np.empty_like(d_range)\n\ncols = sns.cubehelix_palette(np.ceil(len(d_range)/15))\n\nplt.figure()\njcol = 0\n\nfor i1, d in enumerate(d_range):\n\n    struct = tmm_structure([Layer(si(d, 'nm'), SiN), Layer(si('300um'), Si)], incidence=Air, transmission=Ag)\n    RAT = struct.calculate(opts)\n\n    if i1 % 15 == 0:\n        plt.plot(wavelengths*1e9, RAT['R'], label=str(np.round(d, 0)), color=cols[jcol])\n        jcol += 1\n\n    mean_R[i1] = np.mean(RAT['R'])\n    weighted_R[i1] = np.mean(RAT['R']*normalised_spectrum)\n\nprint('Minimum mean reflection occurs at d = ' + str(np.round(d_range[np.argmin(mean_R)], 1)) + ' nm')\nprint('Minimum weighted reflection occurs at d = ' + str(np.round(d_range[np.argmin(weighted_R)], 1)) + ' nm')\n\n\nplt.legend()\nplt.show()\n\nplt.figure()\nplt.plot(d_range, mean_R, label='Mean reflection')\nplt.plot(d_range[np.argmin(mean_R)], np.min(mean_R), 'ok')\nplt.plot(d_range, weighted_R, label='Weighted mean reflection')\nplt.plot(d_range[np.argmin(weighted_R)], np.min(weighted_R), 'ok')\nplt.xlabel('d$_{SiN}$')\nplt.ylabel('(Weighted) mean reflection 300-1200 nm')\nplt.show()\n\nstruct = tmm_structure([Layer(si(d_range[np.argmin(mean_R)], 'nm'), SiN), Layer(si('300um'), Si)], incidence=Air, transmission=Ag)\nRAT_1 = struct.calculate(opts)\n\nstruct = tmm_structure([Layer(si(d_range[np.argmin(weighted_R)], 'nm'), SiN), Layer(si('300um'), Si)], incidence=Air, transmission=Ag)\nRAT_2 = struct.calculate(opts)\n\nplt.figure()\nplt.plot(wavelengths*1e9, RAT_1['R'])\nplt.plot(wavelengths*1e9, RAT_2['R'])\nplt.show()\n\n\npageid_MgF2 = search_db(\"MgF2/Rodriguez-de Marcos\")[0][0]\npageid_Ta2O5 = search_db(\"Ta2O5/Rodriguez-de Marcos\")[0][0]\n\nGaAs = material(\"GaAs\")()\nMgF2 = material(str(pageid_MgF2), nk_db=True)()\nTa2O5 = material(str(pageid_Ta2O5), nk_db=True)()\n\nMgF2_thickness = np.linspace(50, 100, 20)\nTa2O5_thickness = np.linspace(30, 80, 20)\n\nweighted_R_matrix = np.zeros((len(MgF2_thickness), len(Ta2O5_thickness)))\n\nwavelengths_GaAs = wavelengths[wavelengths < 930e-9]\nnormalised_spectrum_GaAs = normalised_spectrum[wavelengths < 930e-9]\n\nopts.coherent = True\nopts.wavelengths = wavelengths_GaAs\n\nfor i1, d_MgF2 in enumerate(MgF2_thickness):\n    for j1, d_Ta2O5 in enumerate(Ta2O5_thickness):\n        struct = tmm_structure([Layer(si(d_MgF2, 'nm'), MgF2), Layer(si(d_Ta2O5, 'nm'), Ta2O5),\n                                Layer(si('20um'), GaAs)],\n                               incidence=Air, transmission=Ag)\n        RAT = struct.calculate(opts)\n\n        weighted_R_matrix[i1, j1] = np.mean(RAT['R'] * normalised_spectrum_GaAs)\n\n\nri, ci = np.unravel_index(weighted_R_matrix.argmin(), weighted_R_matrix.shape)\n\nplt.figure()\nplt.imshow(1-weighted_R_matrix, extent=[min(Ta2O5_thickness), max(Ta2O5_thickness),\n                                        min(MgF2_thickness), max(MgF2_thickness)],\n           origin='lower', aspect='equal')\nplt.plot(Ta2O5_thickness[ci], MgF2_thickness[ri], 'xk')\nplt.colorbar()\nplt.xlabel(\"Ta$_2$O$_5$ thickness (nm)\")\nplt.ylabel(\"MgF$_2$ thickness (nm)\")\nplt.show()\n\nprint(\"Minimum reflection occurs at MgF2 / Ta2O5 thicknesses of %.1f / %.1f nm \"\n     % (MgF2_thickness[ri], Ta2O5_thickness[ci]))"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/7b-optimization.html",
    "href": "solar-cell-simulation/notebooks/7b-optimization.html",
    "title": "solcore-education",
    "section": "",
    "text": "# PyCharm issue with this example!\n\nimport numpy as np\n\nfrom solcore import material, si\n\nimport matplotlib.pyplot as plt\n\nfrom solcore.optics.tmm import OptiStack\nfrom solcore.optics.tmm import calculate_rat\n\n# Import the DE implementation\nfrom solcore.optimization import PDE, DE\nfrom solcore.light_source import LightSource\n\nfrom solcore.solar_cell import SolarCell\nfrom solcore.structure import Junction, Layer\nfrom solcore.solar_cell_solver import solar_cell_solver\nfrom solcore.constants import q, kb\nfrom solcore.material_system import create_new_material\nfrom solcore.absorption_calculator import search_db\n\n# The \"if __name__ == \"__main__\" construction is used to avoid issues with parallel processing on Windows.\n# The issue arises because the multiprocessing module uses a different process on Windows than on UNIX\n# systems which will throw errors if this construction is not used.\n\n# Optimizing a four-junction cell using SiGeSn as the second-lowest bandgap material.\n\n# First, using a purely optical TMM simulation to calculate the photogenerated current in each sub-cell. The thing to\n# optimize is then the current of the current-limiting cell in the structure; in other words we want to *maximize* the\n# lowest sub-cell current, to achieve current-matching with the highest possible current.\n# Since the differential evolution algorithm as implemented does a minimization, we are actually minimizing the negative of\n# this value.\n\n# Once we have good initial values for the total layer thicknesses, we use full electrical simulation to determine the\n# n and p type layer thicknesses to calculate a maximum possible efficiency for the 4J device.\n\n# To use yabox/the optimization module for the DE, we need to define a class which sets up the problem and has an\n# 'evaluate' function, which\n# will actually calculate the value we are trying to minimize for a set of parameters.\n\n# add SiGeSn optical constants to the database\n# create_new_material('SiGeSn', 'data/SiGeSn_n.txt', 'data/SiGeSn_k.txt', 'data/SiGeSn_params.txt') # Note: comment out this line after the material\n# has been added to avoid being asked if you want to overwrite it.\n\n# define class for the optimization:\nclass calc_min_Jsc():\n\n    def __init__(self):\n        # initialize an instance of the class; set some information which will be used in each iteration of the calculation:\n        # materials, wavelengths, the light source\n\n\n        wl = np.linspace(300, 1900, 800)\n\n        # materials\n        SiGeSn = material('SiGeSn')()\n\n        GaAs = material('GaAs')()\n        InGaP = material('GaInP')(In=0.5)\n        Ge = material('Ge')()\n\n        Ta2O5_index = search_db(\"Ta2O5/Rodriguez\")[0][0]\n\n        # make these attributes of 'self' so they can be accessed by the class object\n        # here I am also creating lists of wavelengths and corresponding n and k data from\n        # the Solcore materials - the reason for this is that there is currently an issue with using the Solcore\n        # material class in parallel computations. Thus the information for the n and k data is saved here as a list\n        # rather than a material object (see the documentation of OptiStack for the different acceptable formats\n        # to pass optical constants for an OptiStack)\n\n        self.wl = wl\n        self.SiGeSn = [self.wl, SiGeSn.n(self.wl*1e-9), SiGeSn.k(self.wl*1e-9)]\n        self.Ge = [self.wl, Ge.n(self.wl*1e-9), Ge.k(self.wl*1e-9)]\n\n        self.InGaP = [self.wl, InGaP.n(self.wl*1e-9), InGaP.k(self.wl*1e-9)]\n        self.GaAs = [self.wl, GaAs.n(self.wl*1e-9), GaAs.k(self.wl*1e-9)]\n        self.MgF2 = [self.wl, material('MgF2')().n(self.wl*1e-9), material('MgF2')().k(self.wl*1e-9)]\n\n        self.Ta2O5 = [self.wl, material(str(Ta2O5_index),\n                                        nk_db=True)().n(self.wl*1e-9), material(str(Ta2O5_index),\n                                                                                nk_db=True)().k(self.wl*1e-9)]\n\n        # assuming an AM1.5G spectrum\n        self.spectr = LightSource(source_type='standard', version='AM1.5g', x=self.wl,\n                           output_units='photon_flux_per_nm', concentration=1).spectrum(self.wl)[1]\n\n\n    def calculate(self, x):\n        # x[0] = MgF2 thickness (anti-reflection coating)\n        # x[1] = Ta2O5 thickness (anti-reflection coating)\n        # x[2]  = InGaP (top junction) thickness\n        # x[3] = GaAs (second junction) thickness\n        # x[4] = SiGeSn (third junction) thickness\n\n        # keep the thickness of the bottom cell constant; from a purely optical point of view, this should be infinitely thick,\n        # so there is no point in optimizing the thickness\n\n        SC = [[x[0]] + self.MgF2, [x[1]] + self.Ta2O5, [x[2]] + self.InGaP, [x[3]] + self.GaAs, [x[4]] + self.SiGeSn,\n              [300e3] + self.Ge]  # , [x[5]] + self.Ge]\n\n        # create the OptiStack\n        full_stack = OptiStack(SC, no_back_reflection=False)\n\n        # calculate reflection, transmission, and absorption in each layer. We are specifying that the last layer,\n        # a very thick Ge substrate, should be treated incoherently, otherwise we would see very narrow, unphysical oscillations\n        # in the R/A/T spectra.\n        RAT = calculate_rat(full_stack, self.wl, no_back_reflection=False, coherent=False,\n                            coherency_list=['c', 'c', 'c', 'c', 'c', 'i'])\n\n        # extract absorption per layer\n        A_InGaP = RAT['A_per_layer'][3]\n        A_GaAs = RAT['A_per_layer'][4]\n        A_SiGeSn = RAT['A_per_layer'][5]\n        A_Ge = RAT['A_per_layer'][6]\n\n        return A_InGaP, A_GaAs, A_SiGeSn, A_Ge, RAT['T'], RAT['R']\n\n    def evaluate(self, x):\n\n        A_InGaP, A_GaAs, A_SiGeSn, A_Ge, _, _ =  self.calculate(x)\n\n        # calculate photo-generated currents using the AM1.5 G spectrum for each layer -- this is the current with 100%\n        # internal quantum efficiency (i.e. every absorbed photon generates an electron-hole pair which is collected).\n        Jsc_InGaP = 0.1 * q * np.trapz(A_InGaP * self.spectr, self.wl)\n        Jsc_GaAs = 0.1 * q * np.trapz(A_GaAs * self.spectr, self.wl)\n        Jsc_SiGeSn = 0.1 * q * np.trapz(A_SiGeSn * self.spectr, self.wl)\n        Jsc_Ge = 0.1 * q * np.trapz(A_Ge * self.spectr, self.wl)\n\n        # find the limiting current by checking which junction has the lowest current. Then take the negative since\n        # we need to minimize (not maximize)\n        limiting_Jsc = -min([Jsc_InGaP, Jsc_GaAs, Jsc_SiGeSn, Jsc_Ge])\n\n        return limiting_Jsc\n\n    def plot(self, x):\n\n        A_InGaP, A_GaAs, A_SiGeSn, A_Ge, T, R = self.calculate(x)\n\n        plt.figure()\n        plt.plot(self.wl, A_InGaP, label='InGaP')\n        plt.plot(self.wl, A_GaAs, label='A_GaAs')\n        plt.plot(self.wl, A_SiGeSn, label='SiGeSn')\n        plt.plot(self.wl, A_Ge, label = 'Ge')\n        plt.plot(self.wl, T, label='T')\n        plt.plot(self.wl, R, label='R')\n        plt.legend()\n        plt.xlabel('Wavelength (nm)')\n        plt.ylabel('R/A/T')\n        plt.show()\n\n\nclass calc_min_Jsc_DA():\n\n    def __init__(self, ARC_thickness):\n        self.ARC = ARC_thickness\n\n    def make_cell(self, x):\n\n        #x[0]: total InGaP thickness\n        #x[1]: total InGaAs thickness\n        #x[2]: total SiGeSn thickness\n        #x[3]: total Ge thickness\n\n        #x[4]: InGaP n thickness\n        #x[5]: InGaAs n thickness\n        #x[6]: SiGeSn n thickness\n        #x[7]: Ge n thickness\n\n        e_charge = si('1eV')\n\n        Ta2O5_index = search_db(\"Ta2O5/Rodriguez\")[0][0]\n        # materials\n        SiGeSn = material('SiGeSn')\n\n        GaAs = material('GaAs')\n        InGaP = material('GaInP')\n        Ge = material('Ge')\n        MgF2 = material('MgF2')()\n        Ta2O5 = material(str(Ta2O5_index), nk_db=True)()\n        AlInP = material(\"AlInP\")\n\n        window_material = AlInP(Al=0.52)\n\n        GaInP_mobility_h = 0.03  #\n        GaInP_lifetime_h = 1e-8\n        GaInP_D_h = GaInP_mobility_h * kb * 300 / e_charge\n        GaInP_L_h = np.sqrt(GaInP_D_h * GaInP_lifetime_h)\n        GaInP_mobility_e = 0.015\n        GaInP_lifetime_e = 1e-8\n        GaInP_D_e = GaInP_mobility_e * kb * 300 / e_charge\n        GaInP_L_e = np.sqrt(GaInP_D_e * GaInP_lifetime_e)\n\n        top_cell_n_material = InGaP(In=0.5, Nd=si(\"2e18cm-3\"), hole_diffusion_length=GaInP_L_h,\n                                    relative_permittivity=11.75, hole_mobility=GaInP_mobility_h)\n        top_cell_p_material = InGaP(In=0.5, Na=si(\"2e17cm-3\"), electron_diffusion_length=GaInP_L_e,\n                                    relative_permittivity=11.75, electron_mobility=GaInP_mobility_e)\n\n        # MID CELL  - GaAs\n\n        GaAs_mobility_h = 0.85  #\n        GaAs_lifetime_h = 1e-8\n        GaAs_D_h = GaAs_mobility_h * kb * 300 / e_charge\n        GaAs_L_h = np.sqrt(GaAs_D_h * GaAs_lifetime_h)\n        GaAs_mobility_e = 0.08\n        GaAs_lifetime_e = 1e-8\n        GaAs_D_e = GaAs_mobility_e * kb * 300 / e_charge\n        GaAs_L_e = np.sqrt(GaAs_D_e * GaAs_lifetime_e)\n\n        mid_cell_n_material = GaAs(Nd=si(\"1e18cm-3\"), hole_diffusion_length=GaAs_L_h,\n                                   relative_permittivity=13.1, hole_mobility=GaAs_mobility_h)\n        mid_cell_p_material = GaAs(Na=si(\"1e17cm-3\"), electron_diffusion_length=GaAs_L_e,\n                                   relative_permittivity=13.1, electron_mobility=GaAs_mobility_e)\n\n\n        SiGeSn.band_gap = si('0.77eV') # from PL measurement\n        SiGeSn_L_h = si('0.35um')\n        SiGeSn_L_e = si('5um')\n        SiGeSn_lifetime_e = 1e-6\n        SiGeSn_lifetime_h = 1e-6\n        SiGeSn_mobility_h = SiGeSn_L_h ** 2 * e_charge / (SiGeSn_lifetime_h * kb * 300)\n        SiGeSn_mobility_e = SiGeSn_L_e ** 2 * e_charge / (SiGeSn_lifetime_e * kb * 300)\n\n        pen_cell_n_material = SiGeSn(Nd=si(\"1e18cm-3\"), hole_diffusion_length=SiGeSn_L_h,\n                                     relative_permittivity=16, hole_mobility=SiGeSn_mobility_h)\n        pen_cell_p_material = SiGeSn(Na=si(\"1e17cm-3\"), electron_diffusion_length=SiGeSn_L_e,\n                                     relative_permittivity=16, electron_mobility=SiGeSn_mobility_e)\n\n        # Ge_mobility_h = 0.38 #\n        Ge_lifetime_h = 1e-6\n        # Ge_D_h = Ge_mobility_h*kb*300/e_charge\n        # Ge_L_h = np.sqrt(Ge_D_h*Ge_lifetime_h)\n        Ge_L_h = si('500nm')\n        Ge_mobility_h = Ge_L_h ** 2 * e_charge / (Ge_lifetime_h * kb * 300)\n        Ge_mobility_e = 0.18\n        Ge_lifetime_e = 1e-6\n        Ge_D_e = Ge_mobility_e * kb * 300 / e_charge\n        Ge_L_e = np.sqrt(Ge_D_e * Ge_lifetime_e)\n\n\n        bot_cell_n_material = Ge(Nd=si(\"2e18cm-3\"), hole_diffusion_length=Ge_L_h,\n                                 relative_permittivity=16, hole_mobility=Ge_mobility_h)\n        bot_cell_p_material = Ge(Na=si(\"1e17cm-3\"), electron_diffusion_length=Ge_L_e,\n                                 relative_permittivity=16, electron_mobility=Ge_mobility_e)\n\n\n        # And, finally, we put everything together, adding also the surface recombination velocities. We also add some shading\n        # due to the metallisation of the cell = 8%, and indicate it has an area of 0.7x0.7 mm2 (converted to m2)\n        solar_cell = SolarCell([\n            # Layer(si('110nm'), material = MgF2), Layer(si('55nm'), material = ZnS),\n            Layer(si(self.ARC[0], 'nm'), material=MgF2), Layer(si(self.ARC[1], 'nm'), material=Ta2O5),\n            Junction([Layer(si(25, 'nm'), material=window_material, role='window'),\n                      Layer(si(x[4], 'nm'), material=top_cell_n_material, role='emitter'),\n                      Layer(si(x[0]-x[4], 'nm'), material=top_cell_p_material, role='base'),\n                      ], sn=1, sp=1, kind='DA'),\n            Junction([Layer(si(x[5], 'nm'), material=mid_cell_n_material, role='emitter'),\n                      Layer(si(x[1]-x[5], 'nm'), material=mid_cell_p_material, role='base'),\n                      ], sn=1, sp=1, kind='DA'),\n            Junction([Layer(si(x[6], 'nm'), material=pen_cell_n_material, role='emitter'),\n                      Layer(si(x[2]-x[6], 'nm'), material=pen_cell_p_material, role='base'),\n                      ], sn=1, sp=1, kind='DA'),\n            Junction([Layer(si(x[7], 'nm'), material=bot_cell_n_material, role='emitter'),\n                      Layer(si(x[3]-x[7], 'nm'), material=bot_cell_p_material, role='base'),\n                      ], sn=1, sp=1, kind='DA'),\n        ], shading=0.0, substrate=bot_cell_n_material)\n\n        return solar_cell\n\n    def calculate(self, x):\n        light_source = LightSource(source_type='standard', version='AM1.5g')\n\n        wl = np.linspace(300, 1850, 500) * 1e-9\n\n        solar_cell = self.make_cell(x)\n\n        position = [1e-10] * 10 + [5e-8]\n\n        V = np.linspace(0, 3.5, 300)\n        solar_cell_solver(solar_cell, 'iv',\n                          user_options={'voltages': V, 'light_iv': True, 'wavelength': wl, 'mpp': True,\n                                        'light_source': light_source,\n                                        'optics_method': 'TMM', 'BL_correction': True, 'position': position})\n\n        return wl, solar_cell\n\n    def evaluate(self, x):\n\n        _, solar_cell = self.calculate(x)\n        efficiency = solar_cell.iv[\"Eta\"]\n\n        return -efficiency\n\n    def plot(self, x):\n\n        wl, solar_cell = self.calculate(x)\n\n        V = solar_cell.iv['IV'][0]\n\n        efficiency = solar_cell.iv[\"Eta\"]\n        pmax = solar_cell.iv[\"Pmpp\"]\n        ff = solar_cell.iv[\"FF\"]\n        voc = solar_cell.iv[\"Voc\"]\n        isc = solar_cell.iv[\"Isc\"]\n\n        plt.figure()\n\n        plt.plot(V, solar_cell.iv['IV'][1] / 10, 'k', linewidth=3, label='Total')\n        plt.plot(V, -solar_cell[2].iv(V) / 10, 'b', label='GaInP')\n        plt.plot(V, -solar_cell[3].iv(V) / 10, 'g', label='GaAs')\n        plt.plot(V, -solar_cell[4].iv(V) / 10, 'r', label='SiGeSn')\n        plt.plot(V, -solar_cell[5].iv(V) / 10, 'y', label='Ge')\n        plt.text(2, 10, '$\\eta = $' + str(round(efficiency * 100, 1)) + '%')\n        plt.text(2, 8,'Pmax='+str(round(pmax,1))+'W/m$^2$')\n        plt.text(2, 9, 'FF = ' + str(round(ff * 100, 1)) + '%')\n        plt.text(2,7,'Voc='+str(round(voc,1))+'V')\n        plt.text(2,6, 'Jsc='+str(round(0.1*isc,1))+'mA/cm$^2$')\n\n        plt.legend()\n        plt.ylim(0, 18)\n        plt.xlim(0, 3.5)\n        plt.ylabel('Current (mA/cm$^2$)')\n        plt.xlabel('Voltage (V)')\n\n        plt.show()\n\n        solar_cell_solver(solar_cell, 'qe',\n                         user_options={'wavelength': wl, 'optics_method': 'TMM', 'BL_correction': True, 'position': position})\n\n        plt.figure()\n        plt.plot(wl * 1e9, solar_cell[2].eqe(wl) * 100, 'b', label='InGaP')\n        plt.plot(wl * 1e9, solar_cell[3].eqe(wl) * 100, 'g', label='InGaAs')\n        plt.plot(wl * 1e9, solar_cell[4].eqe(wl) * 100, 'r', label='SiGeSn')\n        plt.plot(wl * 1e9, solar_cell[5].eqe(wl) * 100, 'y', label='Ge')\n        plt.plot(wl * 1e9, solar_cell.absorbed * 100, 'k--', label='Absorption')\n        # plt.plot(wl * 1e9, solar_cell[5].eqe(wl)*100, 'y', label='Ge')\n\n        plt.legend(loc='upper right')\n        plt.xlim(290, 1850)\n        plt.ylim(0, 100)\n        plt.ylabel('EQE (%)')\n        plt.xlabel('Wavelength (nm)')\n        plt.show()\n\n\ndef main():\n    # number of iterations for Differential Evolution optimization of the optical stack\n    maxiters=30\n\n    # make an instance of the class the DE algorithm is going to use, as defined above\n    DE_class = calc_min_Jsc()\n\n    # pass the function which will be minimized to the PDE (parallel differential evolution) solver. PDE calculates the\n    # results for each population in parallel to speed up the overall process. The bounds argument sets upper and lower bounds\n    # for each parameter. PDE_obj contains all the information to run the DE but does not actually invoke the calculation....\n    PDE_obj = PDE(DE_class.evaluate, bounds=[[10,150], [10,105], [200, 1000], [500, 10000], [500, 10000]], maxiters=maxiters)\n\n    # this will run the calculation in parallel, with all the cores available. If you don't want this, use 'DE' instead of 'PDE'\n\n    # to run the DE, use the .solve() function of the PDE object class\n    res = PDE_obj.solve()\n\n    # PDE_obj.solve() returns 5 things:\n    # res[0] is a list of the parameters which gave the minimized value\n    # res[1] is that minimized value\n    # res[2] is the evolution of the best population (the best population from each iteration\n    # res[3] is the evolution of the minimized value, i.e. the fitness over each iteration\n    # res[4] is the evolution of the mean fitness over the iterations\n\n    # best population:\n    best_pop = res[0]\n\n    print('parameters for best result:', best_pop, '\\n', 'optimized Jsc value (mA/cm2):', -res[1])\n\n    # plot the result at these best parameters\n    DE_class.plot(best_pop)\n\n    best_pop_evo = res[2]\n    best_fitn_evo = res[3]\n    mean_fitn_evo = res[4]\n    final_fitness = res[1]\n\n    # plot evolution of the fitness of the best population per iteration\n\n    plt.figure()\n    plt.plot(-best_fitn_evo, '-k', label='Best fitness')\n    plt.plot(-mean_fitn_evo, '-r', label='Mean fitness')\n    plt.xlabel('Iteration')\n    plt.ylabel('Fitness')\n    plt.legend()\n    plt.show()\n\n\n    # these plots show that the fitness of the best population 'jumps' every few iterations as a new best population is found,\n    # while the mean fitness converges slowly as the whole population gradually improves\n\n\n    ## Now that the layer thicknesses have been optimized from an optical point of view, we want to design the device (or\n    # at least a simplified version, by calculating a more realistic EQE. Obviously additional parameters like the doping of the\n    # layers could be varied too.\n\n    # x[0]: total InGaP thickness\n    # x[1]: total InGaAs thickness\n    # x[2]: total SiGeSn thickness\n    # x[3]: total Ge thickness\n\n    # x[4]: InGaP n thickness\n    # x[5]: InGaAs n thickness\n    # x[6]: SiGeSn n thickness\n    # x[7]: Ge n thickness\n\n    # keep the ARC thicknesses fixed at the values obtained in the optical simulation\n\n    # generate upper and lower bounds: total layer thickness between 75% and 125% of values fitted in TMM calculation. Ge\n    # starting value is 200 um\n    starting_params = np.append(best_pop[2:], [200000])\n\n    lower = 0.75*starting_params\n    upper = 1.25*starting_params\n\n    # upper and lower bounds for the n-type (highly doped) layers\n    lower_ntype = [20, 20, 20, 20]\n\n    upper_ntype = [200, 300, 300, 500]\n\n    all_lower = np.append(lower, lower_ntype)\n\n    all_upper = np.append(upper, upper_ntype)\n\n    # full list of bounds\n    all_bounds = np.stack((all_lower, all_upper)).T\n\n    # DE calculation for the electrical simulation\n    maxiters_DA = 10\n    DE_class_DA = calc_min_Jsc_DA(best_pop[0:2])\n\n\n    # default population size = 5*number of params\n    PDE_obj_DA = PDE(DE_class_DA.evaluate, bounds=all_bounds, maxiters=maxiters_DA)\n\n\n    # solve, i.e. minimize the problem\n    res_DA = PDE_obj_DA.solve()\n\n    best_pop_DA = res_DA[0]\n\n    print('parameters for best result:', best_pop_DA, 'optimized efficiency (%)', res_DA[1]*100)\n\n    # plot the result at these best parameters\n    DE_class_DA.plot(best_pop_DA)\n\n    best_pop_evo = res_DA[2]\n    best_fitn_evo = res_DA[3]\n    mean_fitn_evo = res_DA[4]\n    final_fitness = res_DA[1]\n\n    # plot evolution of the fitness of the best population per iteration, and the mean fitness\n\n    plt.figure()\n    plt.plot(-best_fitn_evo, '-k')\n    plt.xlabel('iteration')\n    plt.ylabel('fitness')\n    plt.title('Best fitness')\n    plt.show()\n\n    plt.figure()\n    plt.plot(-mean_fitn_evo, '-k')\n    plt.xlabel('iteration')\n    plt.ylabel('fitness')\n    plt.title('Mean fitness')\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "solar-cell-simulation/notebooks/3a-triple_junction.html",
    "href": "solar-cell-simulation/notebooks/3a-triple_junction.html",
    "title": "solcore-education",
    "section": "",
    "text": "In the previous examples, we have considered only single-junction cells. However, a major part of Solcore’s capability lies in modelling multi-junction solar cells. In this example, we will look at a triple junction InGaP/GaAs/Ge cell at 1 Sun and under concentration.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom solcore import siUnits, material, si\nfrom solcore.solar_cell import SolarCell\nfrom solcore.structure import Junction, Layer\nfrom solcore.solar_cell_solver import solar_cell_solver\nfrom solcore.light_source import LightSource\nfrom solcore.absorption_calculator import search_db\n\nwl = np.linspace(300, 1850, 700) * 1e-9\n\nWe define our light source, the AM1.5G spectrum, which will be used for I-V calculations (not under concentration):\n\nlight_source = LightSource(source_type='standard', x=wl, version='AM1.5g')\n\nNow we need to build the solar cell layer by layer.\nNote: you need to have downloaded the refractiveindex.info database for these to work. See Example 2a.\n\nMgF2_pageid = search_db(\"MgF2/Rodriguez-de Marcos\")[0][0]\nZnS_pageid = search_db(\"ZnS/Querry\")[0][0]\nMgF2 = material(str(MgF2_pageid), nk_db=True)()\nZnS = material(str(ZnS_pageid), nk_db=True)()\n\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\n1 results found.\npageid  shelf   book    page    filepath    hasrefractive   hasextinction   rangeMin    rangeMax    points\n234 main    MgF2    Rodriguez-de_Marcos main/MgF2/Rodriguez-de Marcos.yml   1   1   0.0299919   2.00146 960\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\n1 results found.\npageid  shelf   book    page    filepath    hasrefractive   hasextinction   rangeMin    rangeMax    points\n623 main    ZnS Querry  main/ZnS/Querry.yml 1   1   0.22    166.6667    312\n\n\nTo minimize front surface reflection, we use a four-layer anti-reflection coating (ARC):\n\nARC = [Layer(si(\"100nm\"), MgF2), Layer(si(\"15nm\"), ZnS), Layer(si(\"15nm\"), MgF2), Layer(si(\"50nm\"), ZnS)]\n\n\n\nNow we build the top cell, which requires the n and p sides of GaInP and a window layer. We also add some extra parameters needed for the calculation which are not included in the materials database, such as the minority carriers diffusion lengths.\n\nAlInP = material(\"AlInP\")\nInGaP = material(\"GaInP\")\nwindow_material = AlInP(Al=0.52)\n\ntop_cell_n_material = InGaP(In=0.49, Nd=siUnits(2e18, \"cm-3\"), hole_diffusion_length=si(\"200nm\"))\ntop_cell_p_material = InGaP(In=0.49, Na=siUnits(1e17, \"cm-3\"), electron_diffusion_length=si(\"1um\"))\n\n\n\n\n\nGaAs = material(\"GaAs\")\n\nmid_cell_n_material = GaAs(Nd=siUnits(3e18, \"cm-3\"), hole_diffusion_length=si(\"500nm\"))\nmid_cell_p_material = GaAs(Na=siUnits(1e17, \"cm-3\"), electron_diffusion_length=si(\"5um\"))\n\n\n\n\n\nGe = material(\"Ge\")\n\nbot_cell_n_material = Ge(Nd=siUnits(2e18, \"cm-3\"), hole_diffusion_length=si(\"800nm\"), hole_mobility=0.01)\nbot_cell_p_material = Ge(Na=siUnits(1e17, \"cm-3\"), electron_diffusion_length=si(\"50um\"), electron_mobility=0.1)\n\n\n\n\nAnd, finally, we put everything together, adding also the surface recombination velocities. We also add some shading due to the metallisation of the cell = 5%, and a finite series resistance.\n\nsolar_cell = SolarCell(\n    ARC +\n    [\n        Junction([Layer(si(\"20nm\"), material=window_material, role='window'),\n                  Layer(si(\"100nm\"), material=top_cell_n_material, role='emitter'),\n                  Layer(si(\"560nm\"), material=top_cell_p_material, role='base'),\n                  ], sn=1, sp=1, kind='DA'),\n        Junction([Layer(si(\"200nm\"), material=mid_cell_n_material, role='emitter'),\n                  Layer(si(\"3000nm\"), material=mid_cell_p_material, role='base'),\n                  ], sn=1, sp=1, kind='DA'),\n        Junction([Layer(si(\"400nm\"), material=bot_cell_n_material, role='emitter'),\n                  Layer(si(\"100um\"), material=bot_cell_p_material, role='base'),\n                  ], sn=1, sp=1, kind='DA'),\n    ], shading=0.05, R_series=2e-6)\n\n\n\n\nThe ‘position’ option determines at which z-points the absorption profile is calculated. You can specify this is multiple different ways:\n\na vector which specifies each position (in m) at which the depth should be calculated\na single number which specifies the spacing (in m) to generate the position vector, e.g. 1e-9 for 1 nm spacing\na list of numbers which specify the spacing (in m) to be used in each layer. This list can have EITHER the length of the number of individual layers + the number of junctions in the cell object, OR the length of the total number of individual layers including layers inside junctions.\n\nHere we use the final options, setting the spacing to use per junction/layer. We use 0.1 nm for all layers except the final layer, the Ge, where we use 10 nm.\n\nposition = len(solar_cell) * [0.1e-9]\nposition[-1] = 10e-9\n# Indexing with -1 in a Python list/array gives you the last element\n\nCalculate and plot the EQE.\nPLOT 1: EQE of a triple junction cell, comparing TMM and BL optical methods\n\nplt.figure()\n\nsolar_cell_solver(solar_cell, 'qe', user_options={'wavelength': wl, 'optics_method': \"TMM\",\n                                                  'position': position, 'recalculate_absorption': True})\n\nplt.plot(wl * 1e9, solar_cell[4].eqe(wl) * 100, 'b', label='GaInP (TMM)')\nplt.plot(wl * 1e9, solar_cell[5].eqe(wl) * 100, 'g', label='InGaAs (TMM)')\nplt.plot(wl * 1e9, solar_cell[6].eqe(wl) * 100, 'r', label='Ge (TMM)')\nplt.plot(wl * 1e9, 100 * (1 - solar_cell.reflected), 'k--', label='1-R (TMM)')\n\nsolar_cell_solver(solar_cell, 'qe', user_options={'wavelength': wl, 'optics_method': \"BL\",\n                                                  'position': position, 'recalculate_absorption': True})\n\nplt.plot(wl * 1e9, solar_cell[4].eqe(wl) * 100, 'b--', alpha=0.5, label='GaInP (BL)')\nplt.plot(wl * 1e9, solar_cell[5].eqe(wl) * 100, 'g--', alpha=0.5, label='InGaAs (BL)')\nplt.plot(wl * 1e9, solar_cell[6].eqe(wl) * 100, 'r--', alpha=0.5, label='Ge (BL)')\nplt.legend()\nplt.ylim(0, 100)\nplt.ylabel('EQE (%)')\nplt.xlabel('Wavelength (nm)')\nplt.tight_layout()\nplt.title(\"(1) EQE and absorption for 3J cell using TMM and BL optical methods\")\nplt.show()\n\nSolving optics of the solar cell...\nTreating layer(s) 10 incoherently\nCalculating RAT...\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial main/MgF2/Rodriguez-de Marcos.yml loaded.\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial main/MgF2/Rodriguez-de Marcos.yml loaded.\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial main/ZnS/Querry.yml loaded.\nDatabase file found at /Users/phoebe/.solcore/nk/nk.db\nMaterial main/ZnS/Querry.yml loaded.\nCalculating absorption profile...\nSolving QE of the solar cell...\n\n\n/Users/phoebe/Documents/develop/solcore5/solcore/analytic_solar_cells/depletion_approximation.py:617: RuntimeWarning: invalid value encountered in true_divide\n  iqe =  j_sc / current_absorbed\n\n\nSolving optics of the solar cell...\nSolving QE of the solar cell...\n\n\n/Users/phoebe/Documents/develop/solcore5/solcore/analytic_solar_cells/depletion_approximation.py:617: RuntimeWarning: invalid value encountered in true_divide\n  iqe =  j_sc / current_absorbed\n\n\n\n\n\nWe see that the BL absorption is higher everywhere, because it does not include any front-surface reflection. In the TMM calculation, we see interference fringes and some front-surface reflection (though due to the ARC, the reflection is quite low).\nCalculate and plot the light IV under the AM1.5G spectrum.\nPLOT 2: Light IV for triple-junction cell\n\nV = np.linspace(0, 3, 300)\nsolar_cell_solver(solar_cell, 'iv', user_options={'voltages': V, 'light_iv': True,\n                                                  'wavelength': wl, 'mpp': True,\n                                                  'light_source': light_source})\n\nplt.figure()\nplt.plot(V, solar_cell.iv['IV'][1], 'k', linewidth=3, label='Total')\nplt.plot(V, -solar_cell[4].iv(V), 'b', label='GaInP')\nplt.plot(V, -solar_cell[5].iv(V), 'g', label='InGaAs')\nplt.plot(V, -solar_cell[6].iv(V), 'r', label='Ge')\nplt.text(1.4, 220, 'Efficieny (%): ' + str(np.round(solar_cell.iv['Eta'] * 100, 1)))\nplt.text(1.4, 200, 'FF (%): ' + str(np.round(solar_cell.iv['FF'] * 100, 1)))\nplt.text(1.4, 180, r'V$_{oc}$ (V): ' + str(np.round(solar_cell.iv[\"Voc\"], 2)))\nplt.text(1.4, 160, r'I$_{sc}$ (A/m$^2$): ' + str(np.round(solar_cell.iv[\"Isc\"], 2)))\n\nplt.legend()\nplt.ylim(0, 250)\nplt.xlim(0, 3)\nplt.ylabel('Current (A/m$^2$)')\nplt.xlabel('Voltage (V)')\nplt.title(\"(2) IV characteristics of 3J cell\")\n\nplt.show()\n\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\n\n\n\n\n\n\n\n\nMulti-junction cells are often used in concetrator PV applications. Here, we look at the effect of increasing the concentration on the Voc, Jsc and the efficiency.\nConcentration between 1x and 3000x, linearly spaced on a log scale:\n\nconcentration = np.linspace(np.log(1), np.log(3000), 20)\nconcentration = np.exp(concentration)\n\nCreate empty arrays to store the data (this is preferable to simply appending data in a loop since it pre-allocates the memory needed to store the arrays):\n\nEffs = np.empty_like(concentration)\nVocs = np.empty_like(concentration)\nIscs = np.empty_like(concentration)\n\nV = np.linspace(0, 3.5, 300)\n\nLoop through the concentrations. We use only the direct spectrum (AM1.5D) since diffuse light will not be concentrated:\n\nfor i1, conc in enumerate(concentration):\n\n    # We make a light source with the concentration being considered. We also use AM1.5D (direct only) rather than AM1.5G\n    # (direct + diffuse):\n    light_conc = LightSource(source_type='standard', x=wl, version='AM1.5d', concentration=conc)\n\n    solar_cell_solver(solar_cell, 'iv', user_options={'voltages': V, 'light_iv': True,\n                                                      'wavelength': wl, 'mpp': True,\n                                                      'light_source': light_conc})\n\n    # Save the calculated values in the arrays:\n    Effs[i1] = solar_cell.iv[\"Eta\"] * 100\n    Vocs[i1] = solar_cell.iv[\"Voc\"]\n    Iscs[i1] = solar_cell.iv[\"Isc\"]\n\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\nSolving optics of the solar cell...\nAlready calculated reflection, transmission and absorption profile - not recalculating. Set recalculate_absorption to True in the options if you want absorption to be calculated again.\nSolving IV of the junctions...\nSolving IV of the tunnel junctions...\nSolving IV of the total solar cell...\n\n\nPLOT 3: Efficiency, open-circuit voltage and short-circuit current at different concentrations for the 3J cell\n\nplt.figure(figsize=(10, 3))\nplt.subplot(131)\nplt.semilogx(concentration, Effs, '-o')\nplt.ylabel('Efficiency (%)')\nplt.xlabel('Concentration')\nplt.title(\"(3) Efficiency, V$_{oc}$ and J$_{sc}$ vs. concentration for 3J cell\")\n\nplt.subplot(132)\nplt.semilogx(concentration, Vocs, '-o')\nplt.ylabel(r'V$_{OC}$ (V)')\nplt.xlabel('Concentration')\n\nplt.subplot(133)\nplt.plot(concentration, Iscs / 10000, '-o')\nplt.ylabel(r'J$_{SC}$ (A/cm$^2$)')\nplt.xlabel('Concentration')\nplt.tight_layout()\nplt.show()"
  }
]